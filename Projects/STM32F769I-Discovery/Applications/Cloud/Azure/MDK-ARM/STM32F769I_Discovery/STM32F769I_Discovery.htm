<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F769I_Discovery\STM32F769I_Discovery.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F769I_Discovery\STM32F769I_Discovery.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Oct 24 13:16:16 2018
<BR><P>
<H3>Maximum Stack Usage =       4512 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
net_sock_open_mbedtls &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[38]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1d2]">JSONEncoder_EncodeTree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d2]">JSONEncoder_EncodeTree</a><BR>
 <LI><a href="#[1d3]">MultiTree_Destroy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d3]">MultiTree_Destroy</a><BR>
 <LI><a href="#[1d1]">MultiTree_AddLeaf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d1]">MultiTree_AddLeaf</a><BR>
 <LI><a href="#[20]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">BusFault_Handler</a><BR>
 <LI><a href="#[1e]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">HardFault_Handler</a><BR>
 <LI><a href="#[1f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">MemManage_Handler</a><BR>
 <LI><a href="#[21]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">UsageFault_Handler</a><BR>
 <LI><a href="#[532]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[532]">netconn_drain</a><BR>
 <LI><a href="#[2a5]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a5]">Error_Handler</a><BR>
 <LI><a href="#[57c]">mbedtls_gcm_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c2]">mbedtls_cipher_update</a><BR>
 <LI><a href="#[688]">x509_crt_verify_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[688]">x509_crt_verify_child</a><BR>
 <LI><a href="#[54e]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54d]">lwip_send</a><BR>
 <LI><a href="#[37e]">ParseValue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[362]">ParseObject</a><BR>
 <LI><a href="#[363]">ParseArray</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37e]">ParseValue</a><BR>
 <LI><a href="#[225]">Destroy_AGENT_DATA_TYPE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[225]">Destroy_AGENT_DATA_TYPE</a><BR>
 <LI><a href="#[253]">Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253]">Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE</a><BR>
 <LI><a href="#[27c]">DecodeValueFromNode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27c]">DecodeValueFromNode</a><BR>
 <LI><a href="#[508]">json_serialize_to_buffer_r</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[508]">json_serialize_to_buffer_r</a><BR>
 <LI><a href="#[262]">json_value_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[262]">json_value_free</a><BR>
 <LI><a href="#[504]">json_object_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[262]">json_value_free</a><BR>
 <LI><a href="#[70a]">parse_object_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[506]">parse_value</a><BR>
 <LI><a href="#[705]">parse_array_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[506]">parse_value</a><BR>
 <LI><a href="#[22b]">FindReportedProperty</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22b]">FindReportedProperty</a><BR>
 <LI><a href="#[221]">FindValue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[221]">FindValue</a><BR>
 <LI><a href="#[206]">initializeDesiredProperties</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[206]">initializeDesiredProperties</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[38]">ADC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[a0]">AgentDataTypes_ToString</a> from agenttypesystem.o(i.AgentDataTypes_ToString) referenced from agenttypesystem.o(i.AgentDataTypes_ToString)
 <LI><a href="#[a0]">AgentDataTypes_ToString</a> from agenttypesystem.o(i.AgentDataTypes_ToString) referenced from datamarshaller.o(i.DataMarshaller_SendData)
 <LI><a href="#[20]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3a]">CAN1_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3b]">CAN1_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3c]">CAN1_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[39]">CAN1_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[66]">CAN2_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[67]">CAN2_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[68]">CAN2_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[65]">CAN2_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8e]">CAN3_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8f]">CAN3_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[90]">CAN3_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8d]">CAN3_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[83]">CEC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[9d]">CodeFirst_InvokeAction</a> from codefirst.o(i.CodeFirst_InvokeAction) referenced from codefirst.o(i.CodeFirst_CreateDevice)
 <LI><a href="#[9c]">CodeFirst_InvokeMethod</a> from codefirst.o(i.CodeFirst_InvokeMethod) referenced from codefirst.o(i.CodeFirst_CreateDevice)
 <LI><a href="#[178]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[179]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[167]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[168]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[169]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[171]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[16a]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[16b]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[16c]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[164]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_thumidity</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_thumidity) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[162]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[16d]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[16e]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[16f]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[165]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tpressure</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tpressure) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[166]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[163]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_ttemperature</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_ttemperature) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[170]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[74]">DCMI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[88]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[89]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8a]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8b]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[55]">DMA1_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7f]">DMA2D_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[87]">DSI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[23]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[176]">DesiredPropertyDeinitialize_SerializableIotSampleDev_tDesiredTelemetryInterval</a> from azurexcubesample.o(i.DesiredPropertyDeinitialize_SerializableIotSampleDev_tDesiredTelemetryInterval) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[175]">DesiredPropertyInitialize_SerializableIotSampleDev_tDesiredTelemetryInterval</a> from azurexcubesample.o(i.DesiredPropertyInitialize_SerializableIotSampleDev_tDesiredTelemetryInterval) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[a4]">DeviceInvokeAction</a> from iotdevice.o(i.DeviceInvokeAction) referenced from iotdevice.o(i.Device_Create)
 <LI><a href="#[a3]">DeviceInvokeMethod</a> from iotdevice.o(i.DeviceInvokeMethod) referenced from iotdevice.o(i.Device_Create)
 <LI><a href="#[be]">DeviceMethodCallback</a> from azurexcubesample.o(i.DeviceMethodCallback) referenced from azurexcubesample.o(i.iothub_client_XCube_sample_run)
 <LI><a href="#[c0]">DeviceTwinCallback</a> from azurexcubesample.o(i.DeviceTwinCallback) referenced from azurexcubesample.o(i.iothub_client_XCube_sample_run)
 <LI><a href="#[63]">ETH_IRQHandler</a> from stm32f7xx_it.o(i.ETH_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[64]">ETH_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2c]">EXTI0_IRQHandler</a> from stm32f7xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4e]">EXTI15_10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2d]">EXTI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2e]">EXTI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2f]">EXTI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[30]">EXTI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3d]">EXTI9_5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2a]">FLASH_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[56]">FMC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[76]">FPU_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[177]">FromAGENT_DATA_TYPE_int</a> from azurexcubesample.o(i.FromAGENT_DATA_TYPE_int) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[1e]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[173]">HelloWRAPPER</a> from azurexcubesample.o(i.HelloWRAPPER) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[46]">I2C1_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[45]">I2C1_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[48]">I2C2_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[47]">I2C2_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6f]">I2C3_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6e]">I2C3_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[85]">I2C4_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[84]">I2C4_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[12]">IoTHubTransportMqtt_Create</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[13]">IoTHubTransportMqtt_Destroy</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Destroy) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[c]">IoTHubTransportMqtt_DeviceMethod_Response</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_DeviceMethod_Response) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[18]">IoTHubTransportMqtt_DoWork</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_DoWork) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[10]">IoTHubTransportMqtt_GetHostname</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetHostname) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[1a]">IoTHubTransportMqtt_GetSendStatus</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetSendStatus) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[f]">IoTHubTransportMqtt_ProcessItem</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_ProcessItem) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[14]">IoTHubTransportMqtt_Register</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Register) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[9]">IoTHubTransportMqtt_SendMessageDisposition</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_SendMessageDisposition) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[11]">IoTHubTransportMqtt_SetOption</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetOption) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[19]">IoTHubTransportMqtt_SetRetryPolicy</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetRetryPolicy) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[16]">IoTHubTransportMqtt_Subscribe</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[a]">IoTHubTransportMqtt_Subscribe_DeviceMethod</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceMethod) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[d]">IoTHubTransportMqtt_Subscribe_DeviceTwin</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceTwin) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[15]">IoTHubTransportMqtt_Unregister</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unregister) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[17]">IoTHubTransportMqtt_Unsubscribe</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[b]">IoTHubTransportMqtt_Unsubscribe_DeviceMethod</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceMethod) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[e]">IoTHubTransportMqtt_Unsubscribe_DeviceTwin</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceTwin) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[91]">JPEG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[82]">LPTIM1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7e]">LTDC_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7d]">LTDC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[174]">LedToggleWRAPPER</a> from azurexcubesample.o(i.LedToggleWRAPPER) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[92]">MDIOS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[bd]">MQTT_Protocol</a> from iothubtransportmqtt.o(i.MQTT_Protocol) referenced from azurexcubesample.o(i.iothub_client_XCube_sample_run)
 <LI><a href="#[187]">MainThread</a> from main.o(i.MainThread) referenced from main.o(.constdata)
 <LI><a href="#[1f]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[bf]">MessageCallback</a> from azurexcubesample.o(i.MessageCallback) referenced from azurexcubesample.o(i.iothub_client_XCube_sample_run)
 <LI><a href="#[1d]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ab]">NOPCloneFunction</a> from jsondecoder.o(i.NOPCloneFunction) referenced from jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
 <LI><a href="#[9b]">NoCloneFunction</a> from agenttypesystem.o(i.NoCloneFunction) referenced from agenttypesystem.o(i.AgentDataTypes_ToString)
 <LI><a href="#[9f]">NoCloneFunction</a> from datamarshaller.o(i.NoCloneFunction) referenced from datamarshaller.o(i.DataMarshaller_SendData)
 <LI><a href="#[9a]">NoFreeFunction</a> from agenttypesystem.o(i.NoFreeFunction) referenced from agenttypesystem.o(i.AgentDataTypes_ToString)
 <LI><a href="#[9e]">NoFreeFunction</a> from datamarshaller.o(i.NoFreeFunction) referenced from datamarshaller.o(i.DataMarshaller_SendData)
 <LI><a href="#[aa]">NoFreeFunction</a> from jsondecoder.o(i.NoFreeFunction) referenced from jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[71]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[70]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[72]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[27]">PVD_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[24]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[81]">QUADSPI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2b]">RCC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[75]">RNG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4f]">RTC_Alarm_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[29]">RTC_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[172]">RebootWRAPPER</a> from azurexcubesample.o(i.RebootWRAPPER) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[1c]">Reset_Handler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7c]">SAI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[80]">SAI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[57]">SDMMC1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8c]">SDMMC2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[86]">SPDIF_RX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[49]">SPI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4a]">SPI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[59]">SPI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[79]">SPI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7a]">SPI5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7b]">SPI6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[22]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[b0]">SchemaHandlesMatch</a> from schema.o(i.SchemaHandlesMatch) referenced from schema.o(i.Schema_Destroy)
 <LI><a href="#[b3]">SchemaNamespacesMatch</a> from schema.o(i.SchemaNamespacesMatch) referenced from schema.o(i.Schema_GetSchemaByNamespace)
 <LI><a href="#[c1]">SendConfirmationCallback</a> from azurexcubesample.o(i.SendConfirmationCallback) referenced from azurexcubesample.o(i.iothub_client_XCube_sample_run)
 <LI><a href="#[25]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[94]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[28]">TAMP_STAMP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[41]">TIM1_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[40]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[42]">TIM2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[43]">TIM3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[44]">TIM4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[58]">TIM5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5c]">TIM6_DAC_IRQHandler</a> from stm32f7xx_hal_timebase_tim.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5d]">TIM7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[51]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[54]">TIM8_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[53]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[52]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5a]">UART4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5b]">UART5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[77]">UART7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[78]">UART8_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4b]">USART1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4c]">USART2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4d]">USART3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6d]">USART6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[21]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[a8]">ValidateAsciiCharactersFilter</a> from iothub_message.o(i.ValidateAsciiCharactersFilter) referenced from iothub_message.o(i.IoTHubMessage_CreateFromByteArray)
 <LI><a href="#[26]">WWDG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[95]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[97]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[98]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[96]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[b5]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[b5]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[b6]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[cb]">add_one_and_zeros_padding</a> from cipher.o(i.add_one_and_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[c9]">add_pkcs_padding</a> from cipher.o(i.add_pkcs_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[cd]">add_zeros_and_len_padding</a> from cipher.o(i.add_zeros_and_len_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[cf]">add_zeros_padding</a> from cipher.o(i.add_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[153]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(i.aes_crypt_cbc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[152]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(i.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[156]">aes_ctx_alloc</a> from cipher_wrap.o(i.aes_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[157]">aes_ctx_free</a> from cipher_wrap.o(i.aes_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[155]">aes_setkey_dec_wrap</a> from cipher_wrap.o(i.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[154]">aes_setkey_enc_wrap</a> from cipher_wrap.o(i.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[6]">calloc</a> from calloc.o(.text) referenced 2 times from platform.o(.data)
 <LI><a href="#[6]">calloc</a> from calloc.o(.text) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[18a]">cloud_test</a> from main.o(i.cloud_test) referenced from main.o(.constdata)
 <LI><a href="#[8]">consolelogger_log</a> from consolelogger.o(i.consolelogger_log) referenced 2 times from xlogging.o(.data)
 <LI><a href="#[b8]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.cyclic_timer)
 <LI><a href="#[b8]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[ac]">desiredPropertyExists</a> from schema.o(i.desiredPropertyExists) referenced from schema.o(i.Schema_AddModelDesiredProperty)
 <LI><a href="#[a2]">deviceTwinReportedStateCallback</a> from azurexcubesample.o(i.deviceTwinReportedStateCallback) referenced from azurexcubesample.o(i.DeviceTwinCallback)
 <LI><a href="#[a2]">deviceTwinReportedStateCallback</a> from azurexcubesample.o(i.deviceTwinReportedStateCallback) referenced from azurexcubesample.o(i.LedToggle)
 <LI><a href="#[a2]">deviceTwinReportedStateCallback</a> from azurexcubesample.o(i.deviceTwinReportedStateCallback) referenced from azurexcubesample.o(i.iothub_client_XCube_sample_run)
 <LI><a href="#[184]">dhcp_coarse_tmr</a> from dhcp.o(i.dhcp_coarse_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[185]">dhcp_fine_tmr</a> from dhcp.o(i.dhcp_fine_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[b9]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_inc_pcb_refcount)
 <LI><a href="#[ba]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_alloc_pcb)
 <LI><a href="#[186]">dns_tmr</a> from dns.o(i.dns_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[134]">ecdsa_alloc_wrap</a> from pk_wrap.o(i.ecdsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[131]">ecdsa_can_do</a> from pk_wrap.o(i.ecdsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[135]">ecdsa_free_wrap</a> from pk_wrap.o(i.ecdsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[133]">ecdsa_sign_wrap</a> from pk_wrap.o(i.ecdsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[132]">ecdsa_verify_wrap</a> from pk_wrap.o(i.ecdsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[12d]">eckey_alloc_wrap</a> from pk_wrap.o(i.eckey_alloc_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[129]">eckey_can_do</a> from pk_wrap.o(i.eckey_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[12c]">eckey_check_pair</a> from pk_wrap.o(i.eckey_check_pair) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[12f]">eckey_debug</a> from pk_wrap.o(i.eckey_debug) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[12e]">eckey_free_wrap</a> from pk_wrap.o(i.eckey_free_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[128]">eckey_get_bitlen</a> from pk_wrap.o(i.eckey_get_bitlen) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[12b]">eckey_sign_wrap</a> from pk_wrap.o(i.eckey_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[12a]">eckey_verify_wrap</a> from pk_wrap.o(i.eckey_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[130]">eckeydh_can_do</a> from pk_wrap.o(i.eckeydh_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d3]">ecp_mod_p256</a> from ecp_curves.o(i.ecp_mod_p256) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[d5]">ecp_mod_p256k1</a> from ecp_curves.o(i.ecp_mod_p256k1) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[d4]">ecp_mod_p384</a> from ecp_curves.o(i.ecp_mod_p384) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[c5]">err_tcp</a> from sockets.o(i.err_tcp) referenced from sockets.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[c5]">err_tcp</a> from sockets.o(i.err_tcp) referenced from sockets.o(i.setup_tcp)
 <LI><a href="#[bb]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[183]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[e9]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from lwip_net.o(i.net_if_init)
 <LI><a href="#[ea]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from lwip_net.o(i.net_if_init)
 <LI><a href="#[18b]">ethernetif_input</a> from ethernetif.o(i.ethernetif_input) referenced from ethernetif.o(.constdata)
 <LI><a href="#[c8]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[b4]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[b4]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[b4]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[7]">free</a> from mallocr.o(i.__free$realloc) referenced 4 times from platform.o(.data)
 <LI><a href="#[7]">free</a> from mallocr.o(i.__free$realloc) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[158]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(i.gcm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[159]">gcm_ctx_alloc</a> from cipher_wrap.o(i.gcm_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[15a]">gcm_ctx_free</a> from cipher_wrap.o(i.gcm_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[a9]">getIoTransportProvider</a> from iothubtransportmqtt.o(i.getIoTransportProvider) referenced from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create)
 <LI><a href="#[d1]">get_no_padding</a> from cipher.o(i.get_no_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[cc]">get_one_and_zeros_padding</a> from cipher.o(i.get_one_and_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[ca]">get_pkcs_padding</a> from cipher.o(i.get_pkcs_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[ce]">get_zeros_and_len_padding</a> from cipher.o(i.get_zeros_and_len_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[d0]">get_zeros_padding</a> from cipher.o(i.get_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[182]">ip_reass_tmr</a> from ip4_frag.o(i.ip_reass_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[c2]">ipfrag_free_pbuf_custom</a> from ip4_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip4_frag.o(i.ip4_frag)
 <LI><a href="#[99]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[bc]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[fb]">lwip_netconn_do_bind</a> from sockets.o(i.lwip_netconn_do_bind) referenced from sockets.o(i.netconn_bind)
 <LI><a href="#[fc]">lwip_netconn_do_close</a> from sockets.o(i.lwip_netconn_do_close) referenced from sockets.o(i.netconn_close_shutdown)
 <LI><a href="#[fd]">lwip_netconn_do_connect</a> from sockets.o(i.lwip_netconn_do_connect) referenced from sockets.o(i.netconn_connect)
 <LI><a href="#[c6]">lwip_netconn_do_connected</a> from sockets.o(i.lwip_netconn_do_connected) referenced from sockets.o(i.lwip_netconn_do_connect)
 <LI><a href="#[fe]">lwip_netconn_do_delconn</a> from sockets.o(i.lwip_netconn_do_delconn) referenced from sockets.o(i.netconn_delete)
 <LI><a href="#[ff]">lwip_netconn_do_disconnect</a> from sockets.o(i.lwip_netconn_do_disconnect) referenced from sockets.o(i.netconn_disconnect)
 <LI><a href="#[c7]">lwip_netconn_do_dns_found</a> from sockets.o(i.lwip_netconn_do_dns_found) referenced from sockets.o(i.lwip_netconn_do_gethostbyname)
 <LI><a href="#[100]">lwip_netconn_do_getaddr</a> from sockets.o(i.lwip_netconn_do_getaddr) referenced from sockets.o(i.netconn_getaddr)
 <LI><a href="#[101]">lwip_netconn_do_gethostbyname</a> from sockets.o(i.lwip_netconn_do_gethostbyname) referenced from sockets.o(i.netconn_gethostbyname)
 <LI><a href="#[102]">lwip_netconn_do_newconn</a> from sockets.o(i.lwip_netconn_do_newconn) referenced from sockets.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[103]">lwip_netconn_do_recv</a> from sockets.o(i.lwip_netconn_do_recv) referenced from sockets.o(i.netconn_recv_data)
 <LI><a href="#[104]">lwip_netconn_do_send</a> from sockets.o(i.lwip_netconn_do_send) referenced from sockets.o(i.netconn_send)
 <LI><a href="#[105]">lwip_netconn_do_write</a> from sockets.o(i.lwip_netconn_do_write) referenced from sockets.o(i.netconn_write_partly)
 <LI><a href="#[93]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1b]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 2 times from parson.o(.data)
 <LI><a href="#[b1]">matchModelMethod</a> from schema.o(i.matchModelMethod) referenced from schema.o(i.Schema_GetModelMethodByName)
 <LI><a href="#[b2]">matchModelName</a> from schema.o(i.matchModelName) referenced from schema.o(i.Schema_GetModelModelByName)
 <LI><a href="#[d9]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(i.mbedtls_ctr_drbg_random) referenced from az_tlsio_mbedtls.o(i.mbedtls_init)
 <LI><a href="#[d9]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(i.mbedtls_ctr_drbg_random) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[dc]">mbedtls_debug</a> from az_tlsio_mbedtls.o(i.mbedtls_debug) referenced from az_tlsio_mbedtls.o(i.mbedtls_init)
 <LI><a href="#[d8]">mbedtls_entropy_func</a> from entropy.o(i.mbedtls_entropy_func) referenced from az_tlsio_mbedtls.o(i.mbedtls_init)
 <LI><a href="#[d8]">mbedtls_entropy_func</a> from entropy.o(i.mbedtls_entropy_func) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[d6]">mbedtls_hardware_poll</a> from entropy_hardware_poll.o(i.mbedtls_hardware_poll) referenced from entropy.o(i.mbedtls_entropy_init)
 <LI><a href="#[d6]">mbedtls_hardware_poll</a> from entropy_hardware_poll.o(i.mbedtls_hardware_poll) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[d2]">mbedtls_hmac_drbg_random</a> from hmac_drbg.o(i.mbedtls_hmac_drbg_random) referenced from ecdsa.o(i.mbedtls_ecdsa_sign_det)
 <LI><a href="#[f8]">mbedtls_net_recv</a> from mbedtls_net.o(i.mbedtls_net_recv) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[fa]">mbedtls_net_recv_blocking</a> from mbedtls_net.o(i.mbedtls_net_recv_blocking) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[f9]">mbedtls_net_send</a> from mbedtls_net.o(i.mbedtls_net_send) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[139]">mbedtls_sha1</a> from sha1.o(i.mbedtls_sha1) referenced from md_wrap.o(.constdata)
 <LI><a href="#[af]">methodExists</a> from schema.o(i.methodExists) referenced from schema.o(i.Schema_CreateModelMethod)
 <LI><a href="#[ad]">methodFindArgumentByBame</a> from schema.o(i.methodFindArgumentByBame) referenced from schema.o(i.Schema_AddModelMethodArgument)
 <LI><a href="#[a5]">mqtt_error_callback</a> from iothubtransport_mqtt_common.o(i.mqtt_error_callback) referenced from iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
 <LI><a href="#[a7]">mqtt_notification_callback</a> from iothubtransport_mqtt_common.o(i.mqtt_notification_callback) referenced from iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
 <LI><a href="#[a6]">mqtt_operation_complete_callback</a> from iothubtransport_mqtt_common.o(i.mqtt_operation_complete_callback) referenced from iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
 <LI><a href="#[f7]">my_debug</a> from net_tls_mbedtls.o(i.my_debug) referenced from net_tls_mbedtls.o(i.net_sock_open_mbedtls)
 <LI><a href="#[107]">net_if_deinit</a> from lwip_net.o(i.net_if_deinit) referenced from cloud.o(i.platform_deinit)
 <LI><a href="#[108]">net_if_init</a> from lwip_net.o(i.net_if_init) referenced from cloud.o(i.platform_init)
 <LI><a href="#[f5]">net_sock_close_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_close_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[f0]">net_sock_close_tcp_lwip</a> from net_tcp_lwip.o(i.net_sock_close_tcp_lwip) referenced from net_tcp_lwip.o(i.net_sock_create_lwip)
 <LI><a href="#[f6]">net_sock_destroy_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_destroy_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[f1]">net_sock_destroy_tcp_lwip</a> from net_tcp_lwip.o(i.net_sock_destroy_tcp_lwip) referenced from net_tcp_lwip.o(i.net_sock_create_lwip)
 <LI><a href="#[eb]">net_sock_open_lwip</a> from net_tcp_lwip.o(i.net_sock_open_lwip) referenced from net_tcp_lwip.o(i.net_sock_create_lwip)
 <LI><a href="#[f2]">net_sock_open_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_open_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[f3]">net_sock_recv_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_recv_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[ec]">net_sock_recv_tcp_lwip</a> from net_tcp_lwip.o(i.net_sock_recv_tcp_lwip) referenced from net_tcp_lwip.o(i.net_sock_create_lwip)
 <LI><a href="#[ee]">net_sock_recvfrom_udp_lwip</a> from net_tcp_lwip.o(i.net_sock_recvfrom_udp_lwip) referenced from net_tcp_lwip.o(i.net_sock_create_lwip)
 <LI><a href="#[f4]">net_sock_send_mbedtls</a> from net_tls_mbedtls.o(i.net_sock_send_mbedtls) referenced from net_tls_mbedtls.o(i.net_sock_create_mbedtls)
 <LI><a href="#[ed]">net_sock_send_tcp_lwip</a> from net_tcp_lwip.o(i.net_sock_send_tcp_lwip) referenced from net_tcp_lwip.o(i.net_sock_create_lwip)
 <LI><a href="#[ef]">net_sock_sendto_udp_lwip</a> from net_tcp_lwip.o(i.net_sock_sendto_udp_lwip) referenced from net_tcp_lwip.o(i.net_sock_create_lwip)
 <LI><a href="#[e6]">onBytesReceived</a> from mqtt_client.o(i.onBytesReceived) referenced from mqtt_client.o(i.mqtt_client_connect)
 <LI><a href="#[e5]">onIoError</a> from mqtt_client.o(i.onIoError) referenced from mqtt_client.o(i.mqtt_client_connect)
 <LI><a href="#[e7]">onOpenComplete</a> from mqtt_client.o(i.onOpenComplete) referenced from mqtt_client.o(i.mqtt_client_connect)
 <LI><a href="#[b7]">on_connection_closed</a> from mqtt_client.o(i.on_connection_closed) referenced from mqtt_client.o(i.close_connection)
 <LI><a href="#[da]">on_io_recv</a> from az_tlsio_mbedtls.o(i.on_io_recv) referenced from az_tlsio_mbedtls.o(i.mbedtls_init)
 <LI><a href="#[db]">on_io_send</a> from az_tlsio_mbedtls.o(i.on_io_send) referenced from az_tlsio_mbedtls.o(i.mbedtls_init)
 <LI><a href="#[115]">on_underlying_io_bytes_received</a> from az_tlsio_mbedtls.o(i.on_underlying_io_bytes_received) referenced from az_tlsio_mbedtls.o(i.tlsio_mbedtls_open)
 <LI><a href="#[113]">on_underlying_io_close_complete_during_close</a> from az_tlsio_mbedtls.o(i.on_underlying_io_close_complete_during_close) referenced from az_tlsio_mbedtls.o(i.tlsio_mbedtls_close)
 <LI><a href="#[114]">on_underlying_io_error</a> from az_tlsio_mbedtls.o(i.on_underlying_io_error) referenced from az_tlsio_mbedtls.o(i.tlsio_mbedtls_open)
 <LI><a href="#[116]">on_underlying_io_open_complete</a> from az_tlsio_mbedtls.o(i.on_underlying_io_open_complete) referenced from az_tlsio_mbedtls.o(i.tlsio_mbedtls_open)
 <LI><a href="#[c4]">poll_tcp</a> from sockets.o(i.poll_tcp) referenced from sockets.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[c4]">poll_tcp</a> from sockets.o(i.poll_tcp) referenced from sockets.o(i.setup_tcp)
 <LI><a href="#[11a]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[109]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[e8]">recvCompleteCallback</a> from mqtt_client.o(i.recvCompleteCallback) referenced from mqtt_client.o(i.mqtt_client_init)
 <LI><a href="#[10b]">recv_tcp</a> from sockets.o(i.recv_tcp) referenced from sockets.o(i.setup_tcp)
 <LI><a href="#[106]">recv_udp</a> from sockets.o(i.recv_udp) referenced from sockets.o(i.pcb_new)
 <LI><a href="#[ae]">reportedPropertyExists</a> from schema.o(i.reportedPropertyExists) referenced from schema.o(i.Schema_AddModelReportedProperty)
 <LI><a href="#[ae]">reportedPropertyExists</a> from schema.o(i.reportedPropertyExists) referenced from schema.o(i.Schema_ModelReportedPropertyByPathExists)
 <LI><a href="#[a1]">reportedPropertyExistsByPath</a> from datapublisher.o(i.reportedPropertyExistsByPath) referenced from datapublisher.o(i.DataPublisher_PublishTransacted_ReportedProperty)
 <LI><a href="#[125]">rsa_alloc_wrap</a> from pk_wrap.o(i.rsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[11f]">rsa_can_do</a> from pk_wrap.o(i.rsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[124]">rsa_check_pair_wrap</a> from pk_wrap.o(i.rsa_check_pair_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[127]">rsa_debug</a> from pk_wrap.o(i.rsa_debug) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[122]">rsa_decrypt_wrap</a> from pk_wrap.o(i.rsa_decrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[123]">rsa_encrypt_wrap</a> from pk_wrap.o(i.rsa_encrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[126]">rsa_free_wrap</a> from pk_wrap.o(i.rsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[11e]">rsa_get_bitlen</a> from pk_wrap.o(i.rsa_get_bitlen) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[121]">rsa_sign_wrap</a> from pk_wrap.o(i.rsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[120]">rsa_verify_wrap</a> from pk_wrap.o(i.rsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[10a]">sendComplete</a> from mqtt_client.o(i.sendComplete) referenced from mqtt_client.o(i.sendPacketItem)
 <LI><a href="#[c3]">sent_tcp</a> from sockets.o(i.sent_tcp) referenced from sockets.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[c3]">sent_tcp</a> from sockets.o(i.sent_tcp) referenced from sockets.o(i.setup_tcp)
 <LI><a href="#[13c]">sha1_clone_wrap</a> from md_wrap.o(i.sha1_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13a]">sha1_ctx_alloc</a> from md_wrap.o(i.sha1_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13b]">sha1_ctx_free</a> from md_wrap.o(i.sha1_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[138]">sha1_finish_wrap</a> from md_wrap.o(i.sha1_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13d]">sha1_process_wrap</a> from md_wrap.o(i.sha1_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[136]">sha1_starts_wrap</a> from md_wrap.o(i.sha1_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[137]">sha1_update_wrap</a> from md_wrap.o(i.sha1_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[144]">sha224_clone_wrap</a> from md_wrap.o(i.sha224_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[142]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[143]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[140]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[145]">sha224_process_wrap</a> from md_wrap.o(i.sha224_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[13e]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13f]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[141]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[146]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[147]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14e]">sha384_clone_wrap</a> from md_wrap.o(i.sha384_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14c]">sha384_ctx_alloc</a> from md_wrap.o(i.sha384_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14d]">sha384_ctx_free</a> from md_wrap.o(i.sha384_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14a]">sha384_finish_wrap</a> from md_wrap.o(i.sha384_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14f]">sha384_process_wrap</a> from md_wrap.o(i.sha384_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[148]">sha384_starts_wrap</a> from md_wrap.o(i.sha384_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[149]">sha384_update_wrap</a> from md_wrap.o(i.sha384_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14b]">sha384_wrap</a> from md_wrap.o(i.sha384_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[150]">sha512_starts_wrap</a> from md_wrap.o(i.sha512_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[151]">sha512_wrap</a> from md_wrap.o(i.sha512_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[10e]">socketio_CloneOption</a> from az_socketio_mbed.o(i.socketio_CloneOption) referenced from az_socketio_mbed.o(i.socketio_retrieveoptions)
 <LI><a href="#[10d]">socketio_DestroyOption</a> from az_socketio_mbed.o(i.socketio_DestroyOption) referenced from az_socketio_mbed.o(i.socketio_retrieveoptions)
 <LI><a href="#[15f]">socketio_close</a> from az_socketio_mbed.o(i.socketio_close) referenced from az_socketio_mbed.o(.constdata)
 <LI><a href="#[15c]">socketio_create</a> from az_socketio_mbed.o(i.socketio_create) referenced from az_socketio_mbed.o(.constdata)
 <LI><a href="#[15d]">socketio_destroy</a> from az_socketio_mbed.o(i.socketio_destroy) referenced from az_socketio_mbed.o(.constdata)
 <LI><a href="#[161]">socketio_dowork</a> from az_socketio_mbed.o(i.socketio_dowork) referenced from az_socketio_mbed.o(.constdata)
 <LI><a href="#[15e]">socketio_open</a> from az_socketio_mbed.o(i.socketio_open) referenced from az_socketio_mbed.o(.constdata)
 <LI><a href="#[15b]">socketio_retrieveoptions</a> from az_socketio_mbed.o(i.socketio_retrieveoptions) referenced from az_socketio_mbed.o(.constdata)
 <LI><a href="#[160]">socketio_send</a> from az_socketio_mbed.o(i.socketio_send) referenced from az_socketio_mbed.o(.constdata)
 <LI><a href="#[10c]">socketio_setoption</a> from az_socketio_mbed.o(i.socketio_setoption) referenced from az_socketio_mbed.o(.constdata)
 <LI><a href="#[10c]">socketio_setoption</a> from az_socketio_mbed.o(i.socketio_setoption) referenced from az_socketio_mbed.o(i.socketio_retrieveoptions)
 <LI><a href="#[df]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[e2]">ssl_calc_finished_tls_sha384</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[de]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[e1]">ssl_calc_verify_tls_sha384</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[e3]">ssl_update_checksum_sha256</a> from ssl_tls.o(i.ssl_update_checksum_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[e4]">ssl_update_checksum_sha384</a> from ssl_tls.o(i.ssl_update_checksum_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[10f]">ssl_update_checksum_start</a> from ssl_tls.o(i.ssl_update_checksum_start) referenced from ssl_tls.o(i.ssl_handshake_init)
 <LI><a href="#[110]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[181]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[111]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[111]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcpip_tcp_timer)
 <LI><a href="#[112]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[dd]">tls_prf_sha256</a> from ssl_tls.o(i.tls_prf_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[e0]">tls_prf_sha384</a> from ssl_tls.o(i.tls_prf_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[d7]">tlsio_entropy_poll</a> from az_tlsio_mbedtls.o(i.tlsio_entropy_poll) referenced from az_tlsio_mbedtls.o(i.mbedtls_init)
 <LI><a href="#[119]">tlsio_mbedtls_CloneOption</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_CloneOption) referenced from az_tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
 <LI><a href="#[118]">tlsio_mbedtls_DestroyOption</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_DestroyOption) referenced from az_tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
 <LI><a href="#[17e]">tlsio_mbedtls_close</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_close) referenced from az_tlsio_mbedtls.o(.constdata)
 <LI><a href="#[17b]">tlsio_mbedtls_create</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_create) referenced from az_tlsio_mbedtls.o(.constdata)
 <LI><a href="#[17c]">tlsio_mbedtls_destroy</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_destroy) referenced from az_tlsio_mbedtls.o(.constdata)
 <LI><a href="#[180]">tlsio_mbedtls_dowork</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_dowork) referenced from az_tlsio_mbedtls.o(.constdata)
 <LI><a href="#[17d]">tlsio_mbedtls_open</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_open) referenced from az_tlsio_mbedtls.o(.constdata)
 <LI><a href="#[17a]">tlsio_mbedtls_retrieveoptions</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions) referenced from az_tlsio_mbedtls.o(.constdata)
 <LI><a href="#[17f]">tlsio_mbedtls_send</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_send) referenced from az_tlsio_mbedtls.o(.constdata)
 <LI><a href="#[117]">tlsio_mbedtls_setoption</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_setoption) referenced from az_tlsio_mbedtls.o(.constdata)
 <LI><a href="#[117]">tlsio_mbedtls_setoption</a> from az_tlsio_mbedtls.o(i.tlsio_mbedtls_setoption) referenced from az_tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
 <LI><a href="#[188]">vTask1_Handler</a> from main.o(i.vTask1_Handler) referenced from main.o(.constdata)
 <LI><a href="#[189]">vTask2_Handler</a> from main.o(i.vTask2_Handler) referenced from main.o(.constdata)
 <LI><a href="#[11d]">xio_CloneOption</a> from xio.o(i.xio_CloneOption) referenced from xio.o(i.xio_retrieveoptions)
 <LI><a href="#[11c]">xio_DestroyOption</a> from xio.o(i.xio_DestroyOption) referenced from xio.o(i.xio_retrieveoptions)
 <LI><a href="#[11b]">xio_setoption</a> from xio.o(i.xio_setoption) referenced from xio.o(i.xio_retrieveoptions)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[95]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(.text)
</UL>
<P><STRONG><a name="[7b1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[18c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7b2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7b3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[7b4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[7b5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[7b6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[18d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7b7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7b8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7b9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7ba]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[22]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7ab]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[7aa]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[24]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[799]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7bb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[99]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[403]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
</UL>

<P><STRONG><a name="[304]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[194]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[198]"></a>strftime</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[199]"></a>asctime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, asctime_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[19a]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ctime &rArr; asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consolelogger_log
</UL>

<P><STRONG><a name="[7bc]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_mac_address
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_string
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>

<P><STRONG><a name="[251]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_resize
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_resize
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
</UL>

<P><STRONG><a name="[3a6]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[7bd]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[7be]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip_address
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recvfrom_udp_lwip
</UL>

<P><STRONG><a name="[7bf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7c0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
</UL>

<P><STRONG><a name="[2fc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_lwip
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[7c1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5e4]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[275]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy_s
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strndup
</UL>

<P><STRONG><a name="[23e]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
</UL>

<P><STRONG><a name="[1ec]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy_s
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_set_blocking
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_topic_type
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strdup
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_string
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_nget_value
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
</UL>

<P><STRONG><a name="[1c5]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportedPropertyExists
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;methodFindArgumentByBame
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;methodExists
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchModelName
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchModelMethod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desiredPropertyExists
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchemaNamespacesMatch
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_GetPrimitiveType
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChildByName
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportedPropertyExistsByPath
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_DestroyOption
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_CloneOption
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findKey
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_DestroyOption
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_CloneOption
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_setoption
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_GetOption
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[2ad]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>

<P><STRONG><a name="[4da]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[2af]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_nget_value
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterPemString
</UL>

<P><STRONG><a name="[6]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> platform.o(.data)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[19f]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[1a1]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1bc]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1a3]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1a6]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[1a7]"></a>strtoull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
</UL>

<P><STRONG><a name="[1a9]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[1aa]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[195]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[1a2]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[1a0]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[96]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[1a4]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1b1]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[1b2]"></a>__strtof_int</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, strtof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>

<P><STRONG><a name="[1a8]"></a>__strtoull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, __strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>

<P><STRONG><a name="[7c4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ac]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3e3]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[7c5]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1b0]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[1be]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1b4]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[7c7]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[1c1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[7c8]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[7c9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7ca]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>AGENT_DATA_TYPES_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, agenttypesystem.o(i.AGENT_DATA_TYPES_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_EDM_BOOLEAN_from_int
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
</UL>

<P><STRONG><a name="[a0]"></a>AgentDataTypes_ToString</STRONG> (Thumb, 4300 bytes, Stack size 88 bytes, agenttypesystem.o(i.AgentDataTypes_ToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexDigitToChar
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64char
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b8
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b16
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>
<BR>[Address Reference Count : 2]<UL><LI> datamarshaller.o(i.DataMarshaller_SendData)
<LI> agenttypesystem.o(i.AgentDataTypes_ToString)
</UL>
<P><STRONG><a name="[1d8]"></a>BSP_LED_Init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>BSP_LED_Off</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f769i_discovery.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
</UL>

<P><STRONG><a name="[1dc]"></a>BSP_LED_On</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f769i_discovery.o(i.BSP_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
</UL>

<P><STRONG><a name="[1dd]"></a>BSP_LED_Toggle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f769i_discovery.o(i.BSP_LED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
</UL>

<P><STRONG><a name="[1df]"></a>BSP_PB_Init</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32f769i_discovery.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>BUFFER_clone</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BUFFER_clone &rArr; BUFFER_safemalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[1f3]"></a>BUFFER_content</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_content))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encoder
</UL>

<P><STRONG><a name="[1e5]"></a>BUFFER_create</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, buffer.o(i.BUFFER_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BUFFER_create &rArr; BUFFER_safemalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
</UL>

<P><STRONG><a name="[1e6]"></a>BUFFER_delete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BUFFER_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePacketData
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_destroy
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
</UL>

<P><STRONG><a name="[1e7]"></a>BUFFER_enlarge</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_enlarge))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
</UL>

<P><STRONG><a name="[334]"></a>BUFFER_length</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_length))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
</UL>

<P><STRONG><a name="[1e8]"></a>BUFFER_new</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BUFFER_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[1e9]"></a>BUFFER_pre_build</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_pre_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
</UL>

<P><STRONG><a name="[1ea]"></a>BUFFER_prepend</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_prepend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BUFFER_prepend &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
</UL>

<P><STRONG><a name="[1f4]"></a>BUFFER_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_size))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encoder
</UL>

<P><STRONG><a name="[1ed]"></a>BUFFER_u_char</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_u_char))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
</UL>

<P><STRONG><a name="[1eb]"></a>Base64_Decoder</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, azure_base64.o(i.Base64_Decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Base64_Decoder &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[1f2]"></a>Base64_Encoder</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, azure_base64.o(i.Base64_Encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Base64_Encoder &rArr; Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_size
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_content
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[20]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1f6]"></a>Button_WaitForMultiPush</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.Button_WaitForMultiPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Button_WaitForMultiPush &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[1f8]"></a>Button_WaitForPush</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.Button_WaitForPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Button_WaitForPush
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[1fa]"></a>CLOUD_Error_Handler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cloud.o(i.CLOUD_Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOUD_Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[208]"></a>CODEFIRST_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, codefirst.o(i.CODEFIRST_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
</UL>

<P><STRONG><a name="[1fc]"></a>CONSTBUFFER_Create</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, constbuffer.o(i.CONSTBUFFER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CONSTBUFFER_Create &rArr; CONSTBUFFER_Create_Internal &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
</UL>

<P><STRONG><a name="[1fe]"></a>CONSTBUFFER_Destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, constbuffer.o(i.CONSTBUFFER_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CONSTBUFFER_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
</UL>

<P><STRONG><a name="[1ff]"></a>CONSTBUFFER_GetContent</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, constbuffer.o(i.CONSTBUFFER_GetContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CONSTBUFFER_GetContent
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
</UL>

<P><STRONG><a name="[200]"></a>CaptureAndFlashPem</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, iot_flash_config.o(i.CaptureAndFlashPem))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CaptureAndFlashPem &rArr; FLASH_update &rArr; FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterPemString
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
</UL>

<P><STRONG><a name="[204]"></a>CodeFirst_CreateDevice</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, codefirst.o(i.CodeFirst_CreateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CodeFirst_CreateDevice &rArr; Device_Create &rArr; DataPublisher_Create &rArr; DataMarshaller_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddDeviceRef
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
</UL>

<P><STRONG><a name="[20b]"></a>CodeFirst_Deinit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, codefirst.o(i.CodeFirst_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CodeFirst_Deinit &rArr; DestroyDevice &rArr; Device_Destroy &rArr; DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializer_deinit
</UL>

<P><STRONG><a name="[20d]"></a>CodeFirst_ExecuteCommand</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, codefirst.o(i.CodeFirst_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = CodeFirst_ExecuteCommand &rArr; Device_ExecuteCommand &rArr; CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteCommand
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
</UL>

<P><STRONG><a name="[210]"></a>CodeFirst_ExecuteMethod</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, codefirst.o(i.CodeFirst_ExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = CodeFirst_ExecuteMethod &rArr; Device_ExecuteMethod &rArr; CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteMethod
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
</UL>

<P><STRONG><a name="[212]"></a>CodeFirst_GetPrimitiveType</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, codefirst.o(i.CodeFirst_GetPrimitiveType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CodeFirst_GetPrimitiveType &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[9d]"></a>CodeFirst_InvokeAction</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, codefirst.o(i.CodeFirst_InvokeAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CodeFirst_InvokeAction &rArr; FindChildModelInCodeFirstMetadata &rArr; FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXECUTE_COMMAND_RESULTStrings
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> codefirst.o(i.CodeFirst_CreateDevice)
</UL>
<P><STRONG><a name="[9c]"></a>CodeFirst_InvokeMethod</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, codefirst.o(i.CodeFirst_InvokeMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CodeFirst_InvokeMethod &rArr; FindChildModelInCodeFirstMetadata &rArr; FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> codefirst.o(i.CodeFirst_CreateDevice)
</UL>
<P><STRONG><a name="[217]"></a>CodeFirst_RegisterSchema</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, codefirst.o(i.CodeFirst_RegisterSchema))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CodeFirst_RegisterSchema &rArr; buildModelTypes &rArr; buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaByNamespace
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
</UL>

<P><STRONG><a name="[21d]"></a>CodeFirst_SendAsync</STRONG> (Thumb, 586 bytes, Stack size 144 bytes, codefirst.o(i.CodeFirst_SendAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = CodeFirst_SendAsync &rArr; Device_EndTransaction &rArr; DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[228]"></a>CodeFirst_SendAsyncReported</STRONG> (Thumb, 612 bytes, Stack size 144 bytes, codefirst.o(i.CodeFirst_SendAsyncReported))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DestroyTransaction_ReportedProperties
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CreateTransaction_ReportedProperties
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CommitTransaction_ReportedProperties
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
</UL>

<P><STRONG><a name="[22f]"></a>CommandDecoder_Create</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, commanddecoder.o(i.CommandDecoder_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CommandDecoder_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
</UL>

<P><STRONG><a name="[230]"></a>CommandDecoder_Destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commanddecoder.o(i.CommandDecoder_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CommandDecoder_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
</UL>

<P><STRONG><a name="[231]"></a>CommandDecoder_ExecuteCommand</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, commanddecoder.o(i.CommandDecoder_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteCommand
</UL>

<P><STRONG><a name="[234]"></a>CommandDecoder_ExecuteMethod</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, commanddecoder.o(i.CommandDecoder_ExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteMethod
</UL>

<P><STRONG><a name="[238]"></a>CreateAgentDataType_From_String</STRONG> (Thumb, 2798 bytes, Stack size 112 bytes, agenttypesystem.o(i.CreateAgentDataType_From_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CreateAgentDataType_From_String &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b8
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b16
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf3d2d
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalMinusSign
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatory2CapitalHexDigits
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAndReadNDigitsInt
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan4base64char
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tm_yday_and_tm_wday
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy_s
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[253]"></a>Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE</STRONG> (Thumb, 1272 bytes, Stack size 48 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
</UL>

<P><STRONG><a name="[252]"></a>Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts
</UL>

<P><STRONG><a name="[24f]"></a>Create_AGENT_DATA_TYPE_from_FLOAT</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_FLOAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_ttemperature
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tpressure
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_thumidity
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX
</UL>

<P><STRONG><a name="[256]"></a>Create_AGENT_DATA_TYPE_from_Members</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_Members))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Create_AGENT_DATA_TYPE_from_Members &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[24e]"></a>Create_AGENT_DATA_TYPE_from_SINT32</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_SINT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval
</UL>

<P><STRONG><a name="[250]"></a>Create_AGENT_DATA_TYPE_from_charz</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_charz))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac
</UL>

<P><STRONG><a name="[23d]"></a>Create_AGENT_DATA_TYPE_from_date</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Create_AGENT_DATA_TYPE_from_date
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[24d]"></a>Create_EDM_BOOLEAN_from_int</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_EDM_BOOLEAN_from_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_EDM_BOOLEAN_from_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn
</UL>

<P><STRONG><a name="[258]"></a>DATA_MARSHALLER_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, datamarshaller.o(i.DATA_MARSHALLER_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
</UL>

<P><STRONG><a name="[266]"></a>DATA_PUBLISHER_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, datapublisher.o(i.DATA_PUBLISHER_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
</UL>

<P><STRONG><a name="[294]"></a>DEVICE_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iotdevice.o(i.DEVICE_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInvokeMethod
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInvokeAction
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
</UL>

<P><STRONG><a name="[302]"></a>DList_InitializeListHead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_InitializeListHead))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[31e]"></a>DList_InsertTailList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_InsertTailList))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
</UL>

<P><STRONG><a name="[353]"></a>DList_IsListEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_IsListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetSendStatus
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>

<P><STRONG><a name="[29f]"></a>DList_RemoveEntryList</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_RemoveEntryList))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ReportedStateComplete
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[319]"></a>DList_RemoveHeadList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_RemoveHeadList))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>

<P><STRONG><a name="[257]"></a>DataMarshaller_Create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, datamarshaller.o(i.DataMarshaller_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DataMarshaller_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_MARSHALLER_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
</UL>

<P><STRONG><a name="[259]"></a>DataMarshaller_Destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, datamarshaller.o(i.DataMarshaller_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
</UL>

<P><STRONG><a name="[25a]"></a>DataMarshaller_SendData</STRONG> (Thumb, 552 bytes, Stack size 72 bytes, datamarshaller.o(i.DataMarshaller_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_MARSHALLER_RESULTStrings
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
</UL>

<P><STRONG><a name="[25c]"></a>DataMarshaller_SendData_ReportedProperties</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, datamarshaller.o(i.DataMarshaller_SendData_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[265]"></a>DataPublisher_CancelTransaction</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_CancelTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DataPublisher_CancelTransaction &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
</UL>

<P><STRONG><a name="[267]"></a>DataPublisher_CommitTransaction_ReportedProperties</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, datapublisher.o(i.DataPublisher_CommitTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CommitTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[268]"></a>DataPublisher_Create</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DataPublisher_Create &rArr; DataMarshaller_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
</UL>

<P><STRONG><a name="[269]"></a>DataPublisher_CreateTransaction_ReportedProperties</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_CreateTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DataPublisher_CreateTransaction_ReportedProperties &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CreateTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[26a]"></a>DataPublisher_Destroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datapublisher.o(i.DataPublisher_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
</UL>

<P><STRONG><a name="[26b]"></a>DataPublisher_DestroyTransaction_ReportedProperties</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_DestroyTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DataPublisher_DestroyTransaction_ReportedProperties &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DestroyTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[26d]"></a>DataPublisher_EndTransaction</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_EndTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
</UL>

<P><STRONG><a name="[26e]"></a>DataPublisher_PublishTransacted</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, datapublisher.o(i.DataPublisher_PublishTransacted))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DataPublisher_PublishTransacted &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
</UL>

<P><STRONG><a name="[270]"></a>DataPublisher_PublishTransacted_ReportedProperty</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, datapublisher.o(i.DataPublisher_PublishTransacted_ReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DataPublisher_PublishTransacted_ReportedProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
</UL>

<P><STRONG><a name="[273]"></a>DataPublisher_StartTransaction</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_StartTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DataPublisher_StartTransaction &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
</UL>

<P><STRONG><a name="[23]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[225]"></a>Destroy_AGENT_DATA_TYPE</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, agenttypesystem.o(i.Destroy_AGENT_DATA_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
</UL>

<P><STRONG><a name="[226]"></a>Device_CancelTransaction</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, iotdevice.o(i.Device_CancelTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Device_CancelTransaction &rArr; DataPublisher_CancelTransaction &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[22e]"></a>Device_CommitTransaction_ReportedProperties</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, iotdevice.o(i.Device_CommitTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[207]"></a>Device_Create</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, iotdevice.o(i.Device_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Device_Create &rArr; DataPublisher_Create &rArr; DataMarshaller_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
</UL>

<P><STRONG><a name="[229]"></a>Device_CreateTransaction_ReportedProperties</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, iotdevice.o(i.Device_CreateTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Device_CreateTransaction_ReportedProperties &rArr; DataPublisher_CreateTransaction_ReportedProperties &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[20a]"></a>Device_Destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iotdevice.o(i.Device_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Device_Destroy &rArr; DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Destroy
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
</UL>

<P><STRONG><a name="[22d]"></a>Device_DestroyTransaction_ReportedProperties</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, iotdevice.o(i.Device_DestroyTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Device_DestroyTransaction_ReportedProperties &rArr; DataPublisher_DestroyTransaction_ReportedProperties &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[227]"></a>Device_EndTransaction</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, iotdevice.o(i.Device_EndTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Device_EndTransaction &rArr; DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[20f]"></a>Device_ExecuteCommand</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, iotdevice.o(i.Device_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = Device_ExecuteCommand &rArr; CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
</UL>

<P><STRONG><a name="[211]"></a>Device_ExecuteMethod</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, iotdevice.o(i.Device_ExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = Device_ExecuteMethod &rArr; CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
</UL>

<P><STRONG><a name="[224]"></a>Device_PublishTransacted</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, iotdevice.o(i.Device_PublishTransacted))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Device_PublishTransacted &rArr; DataPublisher_PublishTransacted &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
</UL>

<P><STRONG><a name="[22c]"></a>Device_PublishTransacted_ReportedProperty</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, iotdevice.o(i.Device_PublishTransacted_ReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Device_PublishTransacted_ReportedProperty &rArr; DataPublisher_PublishTransacted_ReportedProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
</UL>

<P><STRONG><a name="[21e]"></a>Device_StartTransaction</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, iotdevice.o(i.Device_StartTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Device_StartTransaction &rArr; DataPublisher_StartTransaction &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[63]"></a>ETH_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler &rArr; HAL_ETH_RxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[216]"></a>EXECUTE_COMMAND_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, codefirst.o(i.EXECUTE_COMMAND_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
</UL>

<P><STRONG><a name="[2c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2a5]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Error_Handler &rArr;  Error_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
</UL>

<P><STRONG><a name="[2c0]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f7xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[2a6]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f7xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2a8]"></a>FLASH_unlock_erase</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, flash_f7.o(i.FLASH_unlock_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>

<P><STRONG><a name="[202]"></a>FLASH_update</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, flash_f7.o(i.FLASH_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FLASH_update &rArr; FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_at
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIoTDeviceConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
</UL>

<P><STRONG><a name="[2ac]"></a>FLASH_write_at</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, flash_f7.o(i.FLASH_write_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Blink
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForMultiPush
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
</UL>

<P><STRONG><a name="[519]"></a>HAL_ETH_DMARxDescListInit</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_DMARxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[518]"></a>HAL_ETH_DMATxDescListInit</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_DMATxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ETH_DMATxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_ETH_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[51b]"></a>HAL_ETH_GetReceivedFrame_IT</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_GetReceivedFrame_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ETH_GetReceivedFrame_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[2a2]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_ETH_IRQHandler &rArr; HAL_ETH_RxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_ETH_Init</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ethernetif.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[2b5]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernetif.o(i.HAL_ETH_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ETH_RxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[2be]"></a>HAL_ETH_Start</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ETH_Start &rArr; ETH_FlushTransmitFIFO &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[51c]"></a>HAL_ETH_TransmitFrame</STRONG> (Thumb, 274 bytes, Stack size 20 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_TransmitFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_TransmitFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f7xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_FLASH_Program</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32f7xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_at
</UL>

<P><STRONG><a name="[2aa]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_UART_Init
</UL>

<P><STRONG><a name="[1de]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[1db]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForPush
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send_mbedtls
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv_mbedtls
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c8]"></a>HAL_InitTick</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, stm32f7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[55b]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55a]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55c]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[4e9]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Config
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1336 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Config
</UL>

<P><STRONG><a name="[2d1]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Config
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[2cb]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[3c6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2d3]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 814 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32f7xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_RNG_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f7xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[2da]"></a>HAL_RTC_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2db]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[2dd]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[2e0]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[2df]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[2e8]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2cd]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2e4]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2e6]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_timebase_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[237]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_UART_Init
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_UART_Receive</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[2f2]"></a>HAL_UART_Transmit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2f3]"></a>HMACSHA256_ComputeHash</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hmacsha256.o(i.HMACSHA256_ComputeHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[1e]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2f5]"></a>Hello</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, azurexcubesample.o(i.Hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Hello &rArr; MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelloWRAPPER
</UL>

<P><STRONG><a name="[333]"></a>IOTHUBMESSAGE_CONTENT_TYPEStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothub_message.o(i.IOTHUBMESSAGE_CONTENT_TYPEStrings))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
</UL>

<P><STRONG><a name="[3bd]"></a>IOTHUB_CLIENT_CONFIRMATION_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IOTHUB_CLIENT_CONFIRMATION_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
</UL>

<P><STRONG><a name="[325]"></a>IOTHUB_CLIENT_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IOTHUB_CLIENT_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceMethodCallback
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetRetryPolicy
</UL>

<P><STRONG><a name="[306]"></a>IoTHubClient_Auth_Create</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubClient_Auth_Create &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[307]"></a>IoTHubClient_Auth_CreateFromDeviceAuth</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_CreateFromDeviceAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClient_Auth_CreateFromDeviceAuth
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[308]"></a>IoTHubClient_Auth_Destroy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IoTHubClient_Auth_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[2b2]"></a>IoTHubClient_Auth_Get_Credential_Type</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_Credential_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_Auth_Get_Credential_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
</UL>

<P><STRONG><a name="[309]"></a>IoTHubClient_Auth_Get_DeviceKey</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_DeviceKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_Auth_Get_DeviceKey
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
</UL>

<P><STRONG><a name="[30a]"></a>IoTHubClient_Auth_Get_SasToken</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_SasToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_CreateString
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[30d]"></a>IoTHubClient_Auth_Is_SasToken_Valid</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Is_SasToken_Valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IoTHubClient_Auth_Is_SasToken_Valid &rArr; SASToken_Validate &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[35e]"></a>IoTHubClient_Auth_Set_x509_Type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Set_x509_Type))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>

<P><STRONG><a name="[2b3]"></a>IoTHubClient_Auth_Set_xio_Certificate</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Set_xio_Certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IoTHubClient_Auth_Set_xio_Certificate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
</UL>

<P><STRONG><a name="[30f]"></a>IoTHubClient_Diagnostic_AddIfNecessary</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, iothub_client_diagnostic.o(i.IoTHubClient_Diagnostic_AddIfNecessary))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IoTHubClient_Diagnostic_AddIfNecessary &rArr; IoTHubMessage_SetDiagnosticPropertyData &rArr; CloneDiagnosticPropertyData &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetDiagnosticPropertyData
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_add_diagnostic_info
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
</UL>

<P><STRONG><a name="[2fa]"></a>IoTHubClient_LL_ConnectionStatusCallBack</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, iothub_client_ll.o(i.IoTHubClient_LL_ConnectionStatusCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_LL_ConnectionStatusCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_error_callback
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[313]"></a>IoTHubClient_LL_CreateFromConnectionString</STRONG> (Thumb, 1778 bytes, Stack size 80 bytes, iothub_client_ll.o(i.IoTHubClient_LL_CreateFromConnectionString))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = IoTHubClient_LL_CreateFromConnectionString &rArr; initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[318]"></a>IoTHubClient_LL_Destroy</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IoTHubClient_LL_Destroy &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[31c]"></a>IoTHubClient_LL_DeviceMethodComplete</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, iothub_client_ll.o(i.IoTHubClient_LL_DeviceMethodComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IoTHubClient_LL_DeviceMethodComplete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[31d]"></a>IoTHubClient_LL_DoWork</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, iothub_client_ll.o(i.IoTHubClient_LL_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = IoTHubClient_LL_DoWork &rArr; DoTimeouts &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[31f]"></a>IoTHubClient_LL_GetOption</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, iothub_client_ll.o(i.IoTHubClient_LL_GetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IoTHubClient_LL_GetOption &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[320]"></a>IoTHubClient_LL_MessageCallback</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, iothub_client_ll.o(i.IoTHubClient_LL_MessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubClient_LL_MessageCallback &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[321]"></a>IoTHubClient_LL_ReportedStateComplete</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, iothub_client_ll.o(i.IoTHubClient_LL_ReportedStateComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IoTHubClient_LL_ReportedStateComplete &rArr; device_twin_data_destroy &rArr; CONSTBUFFER_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[322]"></a>IoTHubClient_LL_RetrievePropertyComplete</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, iothub_client_ll.o(i.IoTHubClient_LL_RetrievePropertyComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClient_LL_RetrievePropertyComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[323]"></a>IoTHubClient_LL_SendComplete</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IoTHubClient_LL_SendComplete &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
</UL>

<P><STRONG><a name="[324]"></a>IoTHubClient_LL_SendEventAsync</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendEventAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IoTHubClient_LL_SendEventAsync &rArr; IoTHubClient_Diagnostic_AddIfNecessary &rArr; IoTHubMessage_SetDiagnosticPropertyData &rArr; CloneDiagnosticPropertyData &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_ms_timesOutAfter
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_RESULTStrings
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[297]"></a>IoTHubClient_LL_SendReportedState</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendReportedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IoTHubClient_LL_SendReportedState &rArr; dev_twin_data_create &rArr; CONSTBUFFER_Create &rArr; CONSTBUFFER_Create_Internal &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
</UL>

<P><STRONG><a name="[329]"></a>IoTHubClient_LL_SetDeviceMethodCallback</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetDeviceMethodCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IoTHubClient_LL_SetDeviceMethodCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[32a]"></a>IoTHubClient_LL_SetDeviceTwinCallback</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetDeviceTwinCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClient_LL_SetDeviceTwinCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[32b]"></a>IoTHubClient_LL_SetMessageCallback</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClient_LL_SetMessageCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[32c]"></a>IoTHubClient_LL_SetOption</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = IoTHubClient_LL_SetOption &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_RESULTStrings
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[32e]"></a>IoTHubClient_LL_SetRetryPolicy</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetRetryPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClient_LL_SetRetryPolicy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[327]"></a>IoTHubMessage_Clone</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, iothub_message.o(i.IoTHubMessage_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IoTHubMessage_Clone &rArr; Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
</UL>

<P><STRONG><a name="[330]"></a>IoTHubMessage_CreateFromByteArray</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_CreateFromByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IoTHubMessage_CreateFromByteArray &rArr; BUFFER_create &rArr; BUFFER_safemalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Create
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[2a0]"></a>IoTHubMessage_Destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[332]"></a>IoTHubMessage_GetByteArray</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_GetByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IoTHubMessage_GetByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUBMESSAGE_CONTENT_TYPEStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
</UL>

<P><STRONG><a name="[335]"></a>IoTHubMessage_GetContentEncodingSystemProperty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetContentEncodingSystemProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetContentEncodingSystemProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[384]"></a>IoTHubMessage_GetContentType</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetContentType))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
</UL>

<P><STRONG><a name="[336]"></a>IoTHubMessage_GetContentTypeSystemProperty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetContentTypeSystemProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetContentTypeSystemProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[337]"></a>IoTHubMessage_GetCorrelationId</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetCorrelationId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetCorrelationId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[338]"></a>IoTHubMessage_GetDiagnosticPropertyData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetDiagnosticPropertyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetDiagnosticPropertyData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[339]"></a>IoTHubMessage_GetMessageId</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetMessageId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetMessageId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[33a]"></a>IoTHubMessage_GetString</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetString))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
</UL>

<P><STRONG><a name="[33b]"></a>IoTHubMessage_Properties</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_Properties))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_Properties
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[33c]"></a>IoTHubMessage_SetContentEncodingSystemProperty</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_SetContentEncodingSystemProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubMessage_SetContentEncodingSystemProperty &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[33d]"></a>IoTHubMessage_SetContentTypeSystemProperty</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_SetContentTypeSystemProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubMessage_SetContentTypeSystemProperty &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[33e]"></a>IoTHubMessage_SetCorrelationId</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, iothub_message.o(i.IoTHubMessage_SetCorrelationId))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubMessage_SetCorrelationId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[312]"></a>IoTHubMessage_SetDiagnosticPropertyData</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, iothub_message.o(i.IoTHubMessage_SetDiagnosticPropertyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IoTHubMessage_SetDiagnosticPropertyData &rArr; CloneDiagnosticPropertyData &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDiagnosticPropertyData
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
</UL>

<P><STRONG><a name="[33f]"></a>IoTHubMessage_SetMessageId</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, iothub_message.o(i.IoTHubMessage_SetMessageId))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubMessage_SetMessageId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[340]"></a>IoTHubTransport_MQTT_Common_Create</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = IoTHubTransport_MQTT_Common_Create &rArr; InitializeTransportHandleData &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Create
</UL>

<P><STRONG><a name="[341]"></a>IoTHubTransport_MQTT_Common_Destroy</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = IoTHubTransport_MQTT_Common_Destroy &rArr; DisconnectFromClient &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_IsListEmpty
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ReportedStateComplete
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Destroy
</UL>

<P><STRONG><a name="[342]"></a>IoTHubTransport_MQTT_Common_DeviceMethod_Response</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_DeviceMethod_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = IoTHubTransport_MQTT_Common_DeviceMethod_Response &rArr; publish_device_method_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_DeviceMethod_Response
</UL>

<P><STRONG><a name="[343]"></a>IoTHubTransport_MQTT_Common_DoWork</STRONG> (Thumb, 532 bytes, Stack size 56 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = IoTHubTransport_MQTT_Common_DoWork &rArr; InitializeConnection &rArr; SendMqttConnectMsg &rArr; IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_DoWork
</UL>

<P><STRONG><a name="[344]"></a>IoTHubTransport_MQTT_Common_GetHostname</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_GetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubTransport_MQTT_Common_GetHostname &rArr; STRING_clone &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_GetHostname
</UL>

<P><STRONG><a name="[345]"></a>IoTHubTransport_MQTT_Common_GetSendStatus</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_GetSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubTransport_MQTT_Common_GetSendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_IsListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_GetSendStatus
</UL>

<P><STRONG><a name="[346]"></a>IoTHubTransport_MQTT_Common_ProcessItem</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_ProcessItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = IoTHubTransport_MQTT_Common_ProcessItem &rArr; publish_device_twin_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_ProcessItem
</UL>

<P><STRONG><a name="[347]"></a>IoTHubTransport_MQTT_Common_Register</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IoTHubTransport_MQTT_Common_Register &rArr; IoTHubClient_Auth_Get_DeviceKey
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_DeviceKey
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Register
</UL>

<P><STRONG><a name="[348]"></a>IoTHubTransport_MQTT_Common_SendMessageDisposition</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_SendMessageDisposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IoTHubTransport_MQTT_Common_SendMessageDisposition &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_SendMessageDisposition
</UL>

<P><STRONG><a name="[349]"></a>IoTHubTransport_MQTT_Common_SetOption</STRONG> (Thumb, 630 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = IoTHubTransport_MQTT_Common_SetOption &rArr; DisconnectFromClient &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_set_trace
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_x509_Type
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_proxy_data
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_SetOption
</UL>

<P><STRONG><a name="[34a]"></a>IoTHubTransport_MQTT_Common_SetRetryPolicy</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_SetRetryPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubTransport_MQTT_Common_SetRetryPolicy &rArr; retry_control_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_destroy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_SetRetryPolicy
</UL>

<P><STRONG><a name="[34b]"></a>IoTHubTransport_MQTT_Common_Subscribe</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Subscribe
</UL>

<P><STRONG><a name="[34c]"></a>IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Subscribe_DeviceMethod
</UL>

<P><STRONG><a name="[34d]"></a>IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Subscribe_DeviceTwin
</UL>

<P><STRONG><a name="[34e]"></a>IoTHubTransport_MQTT_Common_Unregister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unregister))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unregister
</UL>

<P><STRONG><a name="[34f]"></a>IoTHubTransport_MQTT_Common_Unsubscribe</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unsubscribe
</UL>

<P><STRONG><a name="[350]"></a>IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unsubscribe_DeviceMethod
</UL>

<P><STRONG><a name="[351]"></a>IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unsubscribe_DeviceTwin
</UL>

<P><STRONG><a name="[232]"></a>JSONDecoder_JSON_To_MultiTree</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = JSONDecoder_JSON_To_MultiTree &rArr; ParseObject &rArr; ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
</UL>

<P><STRONG><a name="[1d2]"></a>JSONEncoder_EncodeTree</STRONG> (Thumb, 816 bytes, Stack size 88 bytes, jsonencoder.o(i.JSONEncoder_EncodeTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = JSONEncoder_EncodeTree &rArr;  JSONEncoder_EncodeTree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ENCODER_RESULTStrings
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildCount
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChild
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
</UL>

<P><STRONG><a name="[365]"></a>JSON_ENCODER_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jsonencoder.o(i.JSON_ENCODER_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[368]"></a>LedToggle</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, azurexcubesample.o(i.LedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = LedToggle &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggleWRAPPER
</UL>

<P><STRONG><a name="[36a]"></a>Led_Blink</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.Led_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Led_Blink &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[369]"></a>Led_SetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.Led_SetState))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Blink
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>

<P><STRONG><a name="[36e]"></a>MAP_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, map.o(i.MAP_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
</UL>

<P><STRONG><a name="[6b2]"></a>MQTT_CLIENT_EVENT_ERRORStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.MQTT_CLIENT_EVENT_ERRORStrings))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_error_callback
</UL>

<P><STRONG><a name="[bd]"></a>MQTT_Protocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.MQTT_Protocol))
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.iothub_client_XCube_sample_run)
</UL>
<P><STRONG><a name="[377]"></a>MULTITREE_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, multitree.o(i.MULTITREE_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildCount
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChild
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
</UL>

<P><STRONG><a name="[36d]"></a>Map_AddOrUpdate</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, map.o(i.Map_AddOrUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP_RESULTStrings
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findKey
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[32f]"></a>Map_Clone</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, map.o(i.Map_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[331]"></a>Map_Create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, map.o(i.Map_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Map_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
</UL>

<P><STRONG><a name="[28f]"></a>Map_Destroy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, map.o(i.Map_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
</UL>

<P><STRONG><a name="[373]"></a>Map_GetInternals</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, map.o(i.Map_GetInternals))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Map_GetInternals
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[1f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2f6]"></a>MethodReturn_Create</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, methodreturn.o(i.MethodReturn_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hello
</UL>

<P><STRONG><a name="[296]"></a>MethodReturn_Destroy</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, methodreturn.o(i.MethodReturn_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MethodReturn_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
</UL>

<P><STRONG><a name="[295]"></a>MethodReturn_GetReturn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, methodreturn.o(i.MethodReturn_GetReturn))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
</UL>

<P><STRONG><a name="[375]"></a>MultiTree_AddChild</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_AddChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MultiTree_AddChild &rArr; createLeaf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[1d1]"></a>MultiTree_AddLeaf</STRONG> (Thumb, 416 bytes, Stack size 168 bytes, multitree.o(i.MultiTree_AddLeaf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy_s
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChildByName
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
</UL>

<P><STRONG><a name="[1d0]"></a>MultiTree_Create</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MultiTree_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
</UL>

<P><STRONG><a name="[1d3]"></a>MultiTree_Destroy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, multitree.o(i.MultiTree_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = MultiTree_Destroy &rArr;  MultiTree_Destroy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
</UL>

<P><STRONG><a name="[366]"></a>MultiTree_GetChild</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_GetChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MultiTree_GetChild
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[276]"></a>MultiTree_GetChildByName</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, multitree.o(i.MultiTree_GetChildByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MultiTree_GetChildByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
</UL>

<P><STRONG><a name="[364]"></a>MultiTree_GetChildCount</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_GetChildCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MultiTree_GetChildCount
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[367]"></a>MultiTree_GetName</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_GetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MultiTree_GetName &rArr; STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[284]"></a>MultiTree_GetValue</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MultiTree_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
</UL>

<P><STRONG><a name="[379]"></a>MultiTree_SetValue</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MultiTree_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[1d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[37a]"></a>OptionHandler_AddOption</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, optionhandler.o(i.OptionHandler_AddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
</UL>

<P><STRONG><a name="[37b]"></a>OptionHandler_Create</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, optionhandler.o(i.OptionHandler_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OptionHandler_Create &rArr; CreateInternal &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_retrieveoptions
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
</UL>

<P><STRONG><a name="[37c]"></a>OptionHandler_Destroy</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, optionhandler.o(i.OptionHandler_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_DestroyOption
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_DestroyOption
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
</UL>

<P><STRONG><a name="[2b4]"></a>OptionHandler_FeedOptions</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, optionhandler.o(i.OptionHandler_FeedOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OptionHandler_FeedOptions &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
</UL>

<P><STRONG><a name="[382]"></a>Periph_Config</STRONG> (Thumb, 84 bytes, Stack size 176 bytes, stm32f7xx_hal_msp.o(i.Periph_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = Periph_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[738]"></a>QOS_VALUEStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqtt_client.o(i.QOS_VALUEStrings))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[2d8]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[2de]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[2dc]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[383]"></a>Reboot</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, azurexcubesample.o(i.Reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Reboot &rArr; MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootWRAPPER
</UL>

<P><STRONG><a name="[30c]"></a>SASToken_CreateString</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, sastoken.o(i.SASToken_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
</UL>

<P><STRONG><a name="[30e]"></a>SASToken_Validate</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, sastoken.o(i.SASToken_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SASToken_Validate &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
</UL>

<P><STRONG><a name="[1c4]"></a>SCHEMA_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, schema.o(i.SCHEMA_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyType
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyName
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentCount
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentByIndex
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentName
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentType
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentName
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddDeviceRef
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyByIndex
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
</UL>

<P><STRONG><a name="[389]"></a>SHA1Input</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, azure_sha1.o(i.SHA1Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SHA1Input &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[3ca]"></a>SHA1Reset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, azure_sha1.o(i.SHA1Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA1Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[38b]"></a>SHA1Result</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, azure_sha1.o(i.SHA1Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SHA1Result &rArr; SHA1Finalize &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[38c]"></a>SHA224Input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha224.o(i.SHA224Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SHA224Input &rArr; SHA256Input &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[38e]"></a>SHA224Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA224Reset))
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[390]"></a>SHA224Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA224Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = SHA224Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[38d]"></a>SHA256Input</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sha224.o(i.SHA256Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SHA256Input &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Input
</UL>

<P><STRONG><a name="[395]"></a>SHA256Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA256Reset))
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[396]"></a>SHA256Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA256Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = SHA256Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[397]"></a>SHA384Input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA384Input &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[399]"></a>SHA384Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA384Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[39b]"></a>SHA384Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = SHA384Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[398]"></a>SHA512Input</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sha384-512.o(i.SHA512Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Input
</UL>

<P><STRONG><a name="[3a0]"></a>SHA512Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA512Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA512Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[3a1]"></a>SHA512Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA512Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[314]"></a>STRING_TOKENIZER_create</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, string_tokenizer.o(i.STRING_TOKENIZER_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = STRING_TOKENIZER_create &rArr; STRING_TOKENIZER_create_from_char &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[3a2]"></a>STRING_TOKENIZER_create_from_char</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, string_tokenizer.o(i.STRING_TOKENIZER_create_from_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STRING_TOKENIZER_create_from_char &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
</UL>

<P><STRONG><a name="[316]"></a>STRING_TOKENIZER_destroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, string_tokenizer.o(i.STRING_TOKENIZER_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STRING_TOKENIZER_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[315]"></a>STRING_TOKENIZER_get_next_token</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, string_tokenizer.o(i.STRING_TOKENIZER_get_next_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[223]"></a>STRING_c_str</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strings.o(i.STRING_c_str))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetString
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
</UL>

<P><STRONG><a name="[254]"></a>STRING_clone</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, strings.o(i.STRING_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STRING_clone &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetHostname
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[1cb]"></a>STRING_concat</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, strings.o(i.STRING_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
</UL>

<P><STRONG><a name="[1cd]"></a>STRING_concat_with_STRING</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, strings.o(i.STRING_concat_with_STRING))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_concat_with_STRING &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[2ff]"></a>STRING_construct</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, strings.o(i.STRING_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_platform_info
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[245]"></a>STRING_construct_n</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, strings.o(i.STRING_construct_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STRING_construct_n &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[300]"></a>STRING_construct_sprintf</STRONG> (Thumb, 206 bytes, Stack size 560 bytes, strings.o(i.STRING_construct_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[3a5]"></a>STRING_copy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, strings.o(i.STRING_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STRING_copy &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[3a3]"></a>STRING_copy_n</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, strings.o(i.STRING_copy_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
</UL>

<P><STRONG><a name="[222]"></a>STRING_delete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, strings.o(i.STRING_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
</UL>

<P><STRONG><a name="[25b]"></a>STRING_length</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, strings.o(i.STRING_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STRING_length
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
</UL>

<P><STRONG><a name="[220]"></a>STRING_new</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strings.o(i.STRING_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[1f1]"></a>STRING_new_with_memory</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strings.o(i.STRING_new_with_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>

<P><STRONG><a name="[3a7]"></a>STRING_sprintf</STRONG> (Thumb, 232 bytes, Stack size 568 bytes, strings.o(i.STRING_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[209]"></a>Schema_AddDeviceRef</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, schema.o(i.Schema_AddDeviceRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_AddDeviceRef
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
</UL>

<P><STRONG><a name="[3a9]"></a>Schema_AddModelActionArgument</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, schema.o(i.Schema_AddModelActionArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Schema_AddModelActionArgument &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[3aa]"></a>Schema_AddModelDesiredProperty</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, schema.o(i.Schema_AddModelDesiredProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[3ab]"></a>Schema_AddModelMethodArgument</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, schema.o(i.Schema_AddModelMethodArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Schema_AddModelMethodArgument &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[3ac]"></a>Schema_AddModelModel</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, schema.o(i.Schema_AddModelModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Schema_AddModelModel &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[3ad]"></a>Schema_AddModelProperty</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, schema.o(i.Schema_AddModelProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Schema_AddModelProperty &rArr; AddModelProperty &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[3ae]"></a>Schema_AddModelReportedProperty</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, schema.o(i.Schema_AddModelReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Schema_AddModelReportedProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[3af]"></a>Schema_AddStructTypeProperty</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, schema.o(i.Schema_AddStructTypeProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Schema_AddStructTypeProperty &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
</UL>

<P><STRONG><a name="[219]"></a>Schema_Create</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, schema.o(i.Schema_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Schema_Create &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[3b0]"></a>Schema_CreateModelAction</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, schema.o(i.Schema_CreateModelAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Schema_CreateModelAction &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[3b1]"></a>Schema_CreateModelMethod</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, schema.o(i.Schema_CreateModelMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Schema_CreateModelMethod &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[3b2]"></a>Schema_CreateModelType</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, schema.o(i.Schema_CreateModelType))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Schema_CreateModelType &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
</UL>

<P><STRONG><a name="[3b3]"></a>Schema_CreateStructType</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, schema.o(i.Schema_CreateStructType))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Schema_CreateStructType &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
</UL>

<P><STRONG><a name="[21c]"></a>Schema_Destroy</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, schema.o(i.Schema_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Schema_Destroy &rArr; VECTOR_erase &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyProperty
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[27a]"></a>Schema_GetActionArgumentName</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetActionArgumentName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetActionArgumentName
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[27b]"></a>Schema_GetActionArgumentType</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetActionArgumentType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetActionArgumentType
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[281]"></a>Schema_GetMethodArgumentName</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetMethodArgumentName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetMethodArgumentName
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[282]"></a>Schema_GetMethodArgumentType</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, schema.o(i.Schema_GetMethodArgumentType))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Schema_GetMethodArgumentType
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[279]"></a>Schema_GetModelActionArgumentByIndex</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelActionArgumentByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelActionArgumentByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[278]"></a>Schema_GetModelActionArgumentCount</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelActionArgumentCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelActionArgumentCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[277]"></a>Schema_GetModelActionByName</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelActionByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetModelActionByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[3b5]"></a>Schema_GetModelByName</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetModelByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
</UL>

<P><STRONG><a name="[3b6]"></a>Schema_GetModelDesiredPropertyByIndex</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, schema.o(i.Schema_GetModelDesiredPropertyByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Schema_GetModelDesiredPropertyByIndex &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[3b7]"></a>Schema_GetModelDesiredPropertyCount</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelDesiredPropertyCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Schema_GetModelDesiredPropertyCount &rArr; VECTOR_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[3b8]"></a>Schema_GetModelDesiredProperty_offset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelDesiredProperty_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelDesiredProperty_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[3b9]"></a>Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[280]"></a>Schema_GetModelMethodArgumentByIndex</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelMethodArgumentByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Schema_GetModelMethodArgumentByIndex &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[27f]"></a>Schema_GetModelMethodArgumentCount</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelMethodArgumentCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetModelMethodArgumentCount &rArr; VECTOR_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[27e]"></a>Schema_GetModelMethodByName</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, schema.o(i.Schema_GetModelMethodByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Schema_GetModelMethodByName &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[3ba]"></a>Schema_GetModelModelByIndex_Offset</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelModelByIndex_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Schema_GetModelModelByIndex_Offset &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[3a8]"></a>Schema_GetModelModelByName</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelModelByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Schema_GetModelModelByName &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
</UL>

<P><STRONG><a name="[3bb]"></a>Schema_GetModelModelCount</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelModelCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetModelModelCount &rArr; VECTOR_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[3bc]"></a>Schema_GetModelModelyByIndex</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelModelyByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Schema_GetModelModelyByIndex &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[213]"></a>Schema_GetModelName</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, schema.o(i.Schema_GetModelName))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
</UL>

<P><STRONG><a name="[28a]"></a>Schema_GetPropertyName</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetPropertyName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetPropertyName
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[28b]"></a>Schema_GetPropertyType</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetPropertyType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetPropertyType
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[218]"></a>Schema_GetSchemaByNamespace</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, schema.o(i.Schema_GetSchemaByNamespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Schema_GetSchemaByNamespace &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[283]"></a>Schema_GetSchemaForModelType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, schema.o(i.Schema_GetSchemaForModelType))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
</UL>

<P><STRONG><a name="[287]"></a>Schema_GetStructTypeByName</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, schema.o(i.Schema_GetStructTypeByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetStructTypeByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[289]"></a>Schema_GetStructTypePropertyByIndex</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, schema.o(i.Schema_GetStructTypePropertyByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetStructTypePropertyByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[288]"></a>Schema_GetStructTypePropertyCount</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, schema.o(i.Schema_GetStructTypePropertyCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetStructTypePropertyCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[26f]"></a>Schema_ModelPropertyByPathExists</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, schema.o(i.Schema_ModelPropertyByPathExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Schema_ModelPropertyByPathExists &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
</UL>

<P><STRONG><a name="[271]"></a>Schema_ModelReportedPropertyByPathExists</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, schema.o(i.Schema_ModelReportedPropertyByPathExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Schema_ModelReportedPropertyByPathExists &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
</UL>

<P><STRONG><a name="[361]"></a>SkipWhiteSpaces</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, jsondecoder.o(i.SkipWhiteSpaces))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
</UL>

<P><STRONG><a name="[25]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, system_stm32f7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_timebase_tim.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2e2]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[3c3]"></a>ThreadAPI_Sleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, az_threadapi_stm32cube.o(i.ThreadAPI_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[3c4]"></a>TimingSystemGetSystemTime</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, stm32cubertcinterface.o(i.TimingSystemGetSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[2ee]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2ef]"></a>UART_CheckIdleState</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2ed]"></a>UART_SetConfig</STRONG> (Thumb, 550 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2f1]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[3be]"></a>URL_Encode</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, urlencode.o(i.URL_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = URL_Encode &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_PrintableChar
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[4cf]"></a>USHABlockSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usha.o(i.USHABlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[4d0]"></a>USHAHashSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usha.o(i.USHAHashSize))
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[3c8]"></a>USHAInput</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usha.o(i.USHAInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = USHAInput &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Input
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Input
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInput
</UL>

<P><STRONG><a name="[3c9]"></a>USHAReset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usha.o(i.USHAReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USHAReset &rArr; SHA1Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Reset
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Reset
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Reset
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Reset
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[3cb]"></a>USHAResult</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usha.o(i.USHAResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Result
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Result
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Result
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Result
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[21]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[293]"></a>VECTOR_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, vector.o(i.VECTOR_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VECTOR_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[24c]"></a>VECTOR_create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, vector.o(i.VECTOR_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
</UL>

<P><STRONG><a name="[26c]"></a>VECTOR_destroy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vector.o(i.VECTOR_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VECTOR_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
</UL>

<P><STRONG><a name="[260]"></a>VECTOR_element</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, vector.o(i.VECTOR_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByIndex_Offset
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyByIndex
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
</UL>

<P><STRONG><a name="[3b4]"></a>VECTOR_erase</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, vector.o(i.VECTOR_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VECTOR_erase &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
</UL>

<P><STRONG><a name="[272]"></a>VECTOR_find_if</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, vector.o(i.VECTOR_find_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaByNamespace
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodByName
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
</UL>

<P><STRONG><a name="[1c9]"></a>VECTOR_push_back</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, vector.o(i.VECTOR_push_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
</UL>

<P><STRONG><a name="[25f]"></a>VECTOR_size</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, vector.o(i.VECTOR_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VECTOR_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyCount
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
</UL>

<P><STRONG><a name="[3cf]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7cb]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[6bc]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_debug
</UL>

<P><STRONG><a name="[7cc]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[7cd]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[3d1]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7ce]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1fb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consolelogger_log
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIoTDeviceConfig
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_deinit
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_mac_address
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputString
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceTwinReportedStateCallback
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hello
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_set_blocking
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_lwip
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip_address
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_deinit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_at
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send_mbedtls
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv_mbedtls
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_tcp_lwip
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterPemString
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_ask
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
</UL>

<P><STRONG><a name="[7cf]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[7d0]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3d2]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7d1]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[41e]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_set_blocking
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
</UL>

<P><STRONG><a name="[7d2]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[7d3]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[3d3]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7d4]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[37d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_epoch_time
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
</UL>

<P><STRONG><a name="[7d5]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[7d6]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3d4]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7d7]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[7d8]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[7d9]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[40f]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consolelogger_log
</UL>

<P><STRONG><a name="[3d5]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7da]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[7db]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[7dc]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3a4]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
</UL>

<P><STRONG><a name="[3e4]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[7dd]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[7]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyProperty
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Destroy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Destroy
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Destroy
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_clear
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_destroy
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Destroy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Destroy
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_DestroyOption
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_destroy
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelloWRAPPER
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromAGENT_DATA_TYPE_ascii_char_ptr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_destroy
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentTypeSystemProperty
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentEncodingSystemProperty
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DeviceMethodComplete
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_proxy_data
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDiagnosticPropertyData
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_lwip
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_deinit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy_mbedtls
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy_tcp_lwip
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
</UL>
<BR>[Address Reference Count : 3]<UL><LI> platform.o(.data)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
<LI> parson.o(.data)
</UL>
<P><STRONG><a name="[3d6]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[4c8]"></a>__hardfp_difftime</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, difftime.o(i.__hardfp_difftime))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
</UL>

<P><STRONG><a name="[73b]"></a>__hardfp_floor</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_add_diagnostic_info
</UL>

<P><STRONG><a name="[3da]"></a>__hardfp_pow</STRONG> (Thumb, 2140 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
</UL>

<P><STRONG><a name="[242]"></a>__hardfp_strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
</UL>

<P><STRONG><a name="[243]"></a>__hardfp_strtof</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strtof.o(i.__hardfp_strtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[3e2]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Create
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Create
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_create
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_add
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_lwip
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parson.o(.data)
</UL>
<P><STRONG><a name="[3dc]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3db]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3e0]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3dd]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3e1]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b3]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[3d9]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1bf]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4c7]"></a>app_needs_device_keypair</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azurexcubesample.o(i.app_needs_device_keypair))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTLSKeys
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
</UL>

<P><STRONG><a name="[412]"></a>byteutil_writeByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqtt_codec.o(i.byteutil_writeByte))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
</UL>

<P><STRONG><a name="[401]"></a>byteutil_writeInt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mqtt_codec.o(i.byteutil_writeInt))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
</UL>

<P><STRONG><a name="[3ec]"></a>byteutil_writeUTF</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mqtt_codec.o(i.byteutil_writeUTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = byteutil_writeUTF &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
</UL>

<P><STRONG><a name="[71a]"></a>checkIoTDeviceConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iot_flash_config.o(i.checkIoTDeviceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[719]"></a>checkTLSDeviceConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iot_flash_config.o(i.checkTLSDeviceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[718]"></a>checkTLSRootCA</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iot_flash_config.o(i.checkTLSRootCA))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
</UL>

<P><STRONG><a name="[409]"></a>cloud_device_enter_credentials</STRONG> (Thumb, 74 bytes, Stack size 456 bytes, azurexcubesample.o(i.cloud_device_enter_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = cloud_device_enter_credentials &rArr; setIoTDeviceConfig &rArr; FLASH_update &rArr; FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIoTDeviceConfig
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputString
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[4e6]"></a>comp_left_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, azurexcubesample.o(i.comp_left_ms))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[8]"></a>consolelogger_log</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, consolelogger.o(i.consolelogger_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = consolelogger_log &rArr; ctime &rArr; asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xlogging.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>deviceTwinReportedStateCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, azurexcubesample.o(i.deviceTwinReportedStateCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = deviceTwinReportedStateCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> azurexcubesample.o(i.DeviceTwinCallback)
<LI> azurexcubesample.o(i.LedToggle)
<LI> azurexcubesample.o(i.iothub_client_XCube_sample_run)
</UL>
<P><STRONG><a name="[426]"></a>device_model_create</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, azurexcubesample.o(i.device_model_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = device_model_create &rArr; CodeFirst_RegisterSchema &rArr; buildModelTypes &rArr; buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[427]"></a>device_model_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, azurexcubesample.o(i.device_model_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = device_model_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[428]"></a>dhcp_arp_reply</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[184]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[42f]"></a>dhcp_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[432]"></a>dhcp_renew</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[44f]"></a>dhcp_start</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
</UL>

<P><STRONG><a name="[451]"></a>dhcp_stop</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dhcp_stop &rArr; dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
</UL>

<P><STRONG><a name="[44e]"></a>dhcp_supplied_address</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_supplied_address))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[452]"></a>dialog_ask</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cloud.o(i.dialog_ask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dialog_ask &rArr; getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
</UL>

<P><STRONG><a name="[45d]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, dns.o(i.dns_gethostbyname_addrtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[52f]"></a>dns_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dns.o(i.dns_init))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[443]"></a>dns_setserver</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[186]"></a>dns_tmr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = dns_tmr &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>enterPemString</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, iot_flash_config.o(i.enterPemString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = enterPemString &rArr; getInputString &rArr; getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputString
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
</UL>

<P><STRONG><a name="[51f]"></a>err_to_errno</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, err.o(i.err_to_errno))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[4a7]"></a>etharp_input</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = etharp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[bb]"></a>etharp_output</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[42e]"></a>etharp_query</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[4ad]"></a>etharp_request</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[183]"></a>etharp_tmr</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>ethernet_input</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_net.o(i.net_if_init)
</UL>
<P><STRONG><a name="[4ac]"></a>ethernet_output</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ethernet_output &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[ea]"></a>ethernetif_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_net.o(i.net_if_init)
</UL>
<P><STRONG><a name="[3df]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4ba]"></a>fgetc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[b4]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 3]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[3d7]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[40a]"></a>getInputString</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, iot_flash_config.o(i.getInputString))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getInputString &rArr; getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterPemString
</UL>

<P><STRONG><a name="[4e4]"></a>getIoTDeviceConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iot_flash_config.o(i.getIoTDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getIoTDeviceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[4c6]"></a>getTLSKeys</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, iot_flash_config.o(i.getTLSKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getTLSKeys
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_needs_device_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[386]"></a>get_difftime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime.o(i.get_difftime))
<BR><BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
</UL>

<P><STRONG><a name="[303]"></a>get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_epoch_time
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_MessageCallback
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
</UL>

<P><STRONG><a name="[453]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputString
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_ask
</UL>

<P><STRONG><a name="[3c5]"></a>gmtime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timingsystem.o(i.gmtime))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[7de]"></a>gmtimeMDK</STRONG> (Thumb, 288 bytes, Stack size 28 bytes, timingsystem.o(i.gmtimeMDK), UNUSED)

<P><STRONG><a name="[2f4]"></a>hmac</STRONG> (Thumb, 56 bytes, Stack size 400 bytes, hmac.o(i.hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInput
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
</UL>

<P><STRONG><a name="[4cd]"></a>hmacInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hmac.o(i.hmacInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = hmacInput &rArr; USHAInput &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[4cc]"></a>hmacReset</STRONG> (Thumb, 166 bytes, Stack size 464 bytes, hmac.o(i.hmacReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAHashSize
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHABlockSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[4ce]"></a>hmacResult</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hmac.o(i.hmacResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = hmacResult &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[4d1]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4d3]"></a>icmp_input</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4d7]"></a>icmp_time_exceeded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[4d4]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[40c]"></a>iothub_client_XCube_sample_run</STRONG> (Thumb, 1678 bytes, Stack size 88 bytes, azurexcubesample.o(i.iothub_client_XCube_sample_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = iothub_client_XCube_sample_run &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializer_deinit
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_deinit
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_mac_address
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTLSKeys
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTDeviceConfig
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Blink
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetMessageCallback
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceTwinCallback
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceMethodCallback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForMultiPush
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_destroy
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_left_ms
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_test
</UL>

<P><STRONG><a name="[4aa]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4ea]"></a>ip4_frag</STRONG> (Thumb, 390 bytes, Stack size 72 bytes, ip4_frag.o(i.ip4_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[4b2]"></a>ip4_input</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[4d5]"></a>ip4_output_if</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[4f3]"></a>ip4_output_if_src</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>

<P><STRONG><a name="[4ef]"></a>ip4_reass</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, ip4_frag.o(i.ip4_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ip4_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4d6]"></a>ip4_route</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[45e]"></a>ip4addr_aton</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ip4_addr.o(i.ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ip4addr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[182]"></a>ip_reass_tmr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[707]"></a>json_array_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parson.o(i.json_array_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[50c]"></a>json_array_get_value</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, parson.o(i.json_array_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[511]"></a>json_free_serialized_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, parson.o(i.json_free_serialized_string))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
</UL>

<P><STRONG><a name="[25e]"></a>json_object</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, parson.o(i.json_object))
<BR><BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[263]"></a>json_object_dotset_value</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, parson.o(i.json_object_dotset_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = json_object_dotset_value &rArr; json_object_set_value &rArr; json_object_add &rArr; json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_object
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strndup
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[70b]"></a>json_object_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parson.o(i.json_object_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[50d]"></a>json_object_get_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, parson.o(i.json_object_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[502]"></a>json_object_get_object</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, parson.o(i.json_object_get_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = json_object_get_object &rArr; json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
</UL>

<P><STRONG><a name="[4fe]"></a>json_object_get_value</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, parson.o(i.json_object_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_nget_value
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_object
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>

<P><STRONG><a name="[503]"></a>json_object_set_value</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, parson.o(i.json_object_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = json_object_set_value &rArr; json_object_add &rArr; json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
</UL>

<P><STRONG><a name="[261]"></a>json_parse_string</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, parson.o(i.json_parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[507]"></a>json_serialization_size_pretty</STRONG> (Thumb, 36 bytes, Stack size 1112 bytes, parson.o(i.json_serialization_size_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_pretty
</UL>

<P><STRONG><a name="[50a]"></a>json_serialize_to_buffer_pretty</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, parson.o(i.json_serialize_to_buffer_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialization_size_pretty
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
</UL>

<P><STRONG><a name="[264]"></a>json_serialize_to_string_pretty</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, parson.o(i.json_serialize_to_string_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_pretty
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialization_size_pretty
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_free_serialized_string
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[262]"></a>json_value_free</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, parson.o(i.json_value_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = json_value_free &rArr;  json_value_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_free
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_free
</UL>

<P><STRONG><a name="[50b]"></a>json_value_get_array</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parson.o(i.json_value_get_array))
<BR><BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[50f]"></a>json_value_get_boolean</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, parson.o(i.json_value_get_boolean))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[510]"></a>json_value_get_number</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, parson.o(i.json_value_get_number))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[4fc]"></a>json_value_get_object</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parson.o(i.json_value_get_object))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_object
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[50e]"></a>json_value_get_string</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parson.o(i.json_value_get_string))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[706]"></a>json_value_init_array</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, parson.o(i.json_value_init_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = json_value_init_array
</UL>
<BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[710]"></a>json_value_init_boolean</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, parson.o(i.json_value_init_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_value_init_boolean
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[711]"></a>json_value_init_null</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, parson.o(i.json_value_init_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_value_init_null
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[709]"></a>json_value_init_number</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, parson.o(i.json_value_init_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = json_value_init_number
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
</UL>

<P><STRONG><a name="[25d]"></a>json_value_init_object</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, parson.o(i.json_value_init_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = json_value_init_object
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[51d]"></a>lwip_bind</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sockets.o(i.lwip_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
</UL>

<P><STRONG><a name="[520]"></a>lwip_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_tcp_lwip
</UL>

<P><STRONG><a name="[522]"></a>lwip_connect</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sockets.o(i.lwip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_connect &rArr; netconn_disconnect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
</UL>

<P><STRONG><a name="[525]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, netdb.o(i.lwip_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
</UL>

<P><STRONG><a name="[526]"></a>lwip_getaddrinfo</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, netdb.o(i.lwip_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
</UL>

<P><STRONG><a name="[435]"></a>lwip_htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[45f]"></a>lwip_htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_sendto_udp_lwip
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recvfrom_udp_lwip
</UL>

<P><STRONG><a name="[528]"></a>lwip_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[fb]"></a>lwip_netconn_do_bind</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sockets.o(i.lwip_netconn_do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[fc]"></a>lwip_netconn_do_close</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, sockets.o(i.lwip_netconn_do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[fd]"></a>lwip_netconn_do_connect</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, sockets.o(i.lwip_netconn_do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_connect)
</UL>
<P><STRONG><a name="[fe]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, sockets.o(i.lwip_netconn_do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[ff]"></a>lwip_netconn_do_disconnect</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sockets.o(i.lwip_netconn_do_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lwip_netconn_do_disconnect &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_disconnect)
</UL>
<P><STRONG><a name="[100]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, sockets.o(i.lwip_netconn_do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lwip_netconn_do_getaddr &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[101]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sockets.o(i.lwip_netconn_do_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_gethostbyname)
</UL>
<P><STRONG><a name="[102]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sockets.o(i.lwip_netconn_do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[103]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sockets.o(i.lwip_netconn_do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_recv_data)
</UL>
<P><STRONG><a name="[104]"></a>lwip_netconn_do_send</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sockets.o(i.lwip_netconn_do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lwip_netconn_do_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_send)
</UL>
<P><STRONG><a name="[105]"></a>lwip_netconn_do_write</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, sockets.o(i.lwip_netconn_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[548]"></a>lwip_recv</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sockets.o(i.lwip_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv_tcp_lwip
</UL>

<P><STRONG><a name="[549]"></a>lwip_recvfrom</STRONG> (Thumb, 484 bytes, Stack size 112 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recvfrom_udp_lwip
</UL>

<P><STRONG><a name="[54d]"></a>lwip_send</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send_tcp_lwip
</UL>

<P><STRONG><a name="[54e]"></a>lwip_sendto</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_sendto_udp_lwip
</UL>

<P><STRONG><a name="[553]"></a>lwip_setsockopt</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwip_setsockopt &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
</UL>

<P><STRONG><a name="[556]"></a>lwip_shutdown</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sockets.o(i.lwip_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_tcp_lwip
</UL>

<P><STRONG><a name="[558]"></a>lwip_socket</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_lwip
</UL>

<P><STRONG><a name="[4d8]"></a>lwip_standard_chksum</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>

<P><STRONG><a name="[45c]"></a>lwip_strnicmp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, def.o(i.lwip_strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[93]"></a>main</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = main &rArr; Periph_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Config
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_UART_Init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1c7]"></a>mallocAndStrcpy_s</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, crt_abstractions.o(i.mallocAndStrcpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_CloneOption
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromAGENT_DATA_TYPE_ascii_char_ptr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentTypeSystemProperty
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentEncodingSystemProperty
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[3f1]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, aes.o(i.mbedtls_aes_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
</UL>

<P><STRONG><a name="[3f2]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[3f4]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_free))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[3f3]"></a>mbedtls_aes_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[3f5]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 202 bytes, Stack size 320 bytes, aes.o(i.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[3f6]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 442 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[563]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
</UL>

<P><STRONG><a name="[567]"></a>mbedtls_asn1_get_alg_null</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_alg_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
</UL>

<P><STRONG><a name="[568]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[569]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[56a]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[56b]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[566]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[56c]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[56d]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, asn1parse.o(i.mbedtls_asn1_get_sequence_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[564]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, asn1parse.o(i.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crl_entry_ext
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>

<P><STRONG><a name="[46b]"></a>mbedtls_asn1_write_len</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, asn1write.o(i.mbedtls_asn1_write_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[46a]"></a>mbedtls_asn1_write_mpi</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, asn1write.o(i.mbedtls_asn1_write_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[46c]"></a>mbedtls_asn1_write_tag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asn1write.o(i.mbedtls_asn1_write_tag))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[5e5]"></a>mbedtls_base64_decode</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, base64.o(i.mbedtls_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[570]"></a>mbedtls_cipher_auth_decrypt</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, cipher.o(i.mbedtls_cipher_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[572]"></a>mbedtls_cipher_auth_encrypt</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, cipher.o(i.mbedtls_cipher_auth_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[574]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[577]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[5b0]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[635]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[5b1]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, cipher.o(i.mbedtls_cipher_info_from_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[579]"></a>mbedtls_cipher_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[576]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_reset))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[575]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[57b]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_set_padding_mode))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[5b2]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[57a]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[4c2]"></a>mbedtls_cipher_update</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, cipher.o(i.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[4e1]"></a>mbedtls_ctr_drbg_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ctr_drbg_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[57d]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[d9]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1436<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> az_tlsio_mbedtls.o(i.mbedtls_init)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[57e]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[57f]"></a>mbedtls_ctr_drbg_reseed</STRONG> (Thumb, 106 bytes, Stack size 408 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340<LI>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[580]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428<LI>Call Chain = mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[581]"></a>mbedtls_ctr_drbg_seed_entropy_len</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_seed_entropy_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404<LI>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
</UL>

<P><STRONG><a name="[dc]"></a>mbedtls_debug</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, az_tlsio_mbedtls.o(i.mbedtls_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_debug &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[582]"></a>mbedtls_debug_print_buf</STRONG> (Thumb, 252 bytes, Stack size 592 bytes, debug.o(i.mbedtls_debug_print_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[583]"></a>mbedtls_debug_print_crt</STRONG> (Thumb, 238 bytes, Stack size 2112 bytes, debug.o(i.mbedtls_debug_print_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3384<LI>Call Chain = mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[420]"></a>mbedtls_debug_print_ecp</STRONG> (Thumb, 112 bytes, Stack size 560 bytes, debug.o(i.mbedtls_debug_print_ecp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[41f]"></a>mbedtls_debug_print_mpi</STRONG> (Thumb, 344 bytes, Stack size 568 bytes, debug.o(i.mbedtls_debug_print_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[585]"></a>mbedtls_debug_print_msg</STRONG> (Thumb, 92 bytes, Stack size 536 bytes, debug.o(i.mbedtls_debug_print_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_truncated_hmac_ext
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[586]"></a>mbedtls_debug_print_ret</STRONG> (Thumb, 84 bytes, Stack size 544 bytes, debug.o(i.mbedtls_debug_print_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[5ca]"></a>mbedtls_debug_set_threshold</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(i.mbedtls_debug_set_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[587]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ecdh.o(i.mbedtls_ecdh_calc_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[588]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, ecdh.o(i.mbedtls_ecdh_compute_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[58c]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ecdh.o(i.mbedtls_ecdh_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[58e]"></a>mbedtls_ecdh_gen_public</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ecdh.o(i.mbedtls_ecdh_gen_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[590]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ecdh.o(i.mbedtls_ecdh_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[591]"></a>mbedtls_ecdh_make_public</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ecdh.o(i.mbedtls_ecdh_make_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[593]"></a>mbedtls_ecdh_read_params</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ecdh.o(i.mbedtls_ecdh_read_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[467]"></a>mbedtls_ecdsa_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecdsa.o(i.mbedtls_ecdsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
</UL>

<P><STRONG><a name="[471]"></a>mbedtls_ecdsa_from_keypair</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ecdsa.o(i.mbedtls_ecdsa_from_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>

<P><STRONG><a name="[466]"></a>mbedtls_ecdsa_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecdsa.o(i.mbedtls_ecdsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
</UL>

<P><STRONG><a name="[46d]"></a>mbedtls_ecdsa_read_signature</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, ecdsa.o(i.mbedtls_ecdsa_read_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>

<P><STRONG><a name="[598]"></a>mbedtls_ecdsa_sign</STRONG> (Thumb, 362 bytes, Stack size 128 bytes, ecdsa.o(i.mbedtls_ecdsa_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[599]"></a>mbedtls_ecdsa_sign_det</STRONG> (Thumb, 158 bytes, Stack size 312 bytes, ecdsa.o(i.mbedtls_ecdsa_sign_det))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[597]"></a>mbedtls_ecdsa_verify</STRONG> (Thumb, 306 bytes, Stack size 136 bytes, ecdsa.o(i.mbedtls_ecdsa_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[468]"></a>mbedtls_ecdsa_write_signature</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, ecdsa.o(i.mbedtls_ecdsa_write_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312<LI>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>

<P><STRONG><a name="[59f]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[46f]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 172 bytes, Stack size 200 bytes, ecp.o(i.mbedtls_ecp_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[589]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[474]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[74a]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_grp_id))
<BR><BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[5a7]"></a>mbedtls_ecp_curve_info_from_tls_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_tls_id))
<BR><BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>

<P><STRONG><a name="[58f]"></a>mbedtls_ecp_gen_keypair</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_gen_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[5a2]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 140 bytes, Stack size 120 bytes, ecp.o(i.mbedtls_ecp_gen_keypair_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[596]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_group_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[58d]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>

<P><STRONG><a name="[5a1]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>

<P><STRONG><a name="[5a3]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, ecp_curves.o(i.mbedtls_ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>

<P><STRONG><a name="[632]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_grp_id_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_grp_id_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[58b]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_is_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[470]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[46e]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
</UL>

<P><STRONG><a name="[58a]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[59e]"></a>mbedtls_ecp_muladd</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, ecp.o(i.mbedtls_ecp_muladd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[494]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[495]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[5a5]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_point_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
</UL>

<P><STRONG><a name="[5a6]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, ecp.o(i.mbedtls_ecp_point_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>

<P><STRONG><a name="[479]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_set_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[594]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_tls_read_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[595]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_tls_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[592]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_tls_write_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[5ab]"></a>mbedtls_entropy_add_source</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, entropy.o(i.mbedtls_entropy_add_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_entropy_add_source
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[4e2]"></a>mbedtls_entropy_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, entropy.o(i.mbedtls_entropy_free))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[d8]"></a>mbedtls_entropy_func</STRONG> (Thumb, 188 bytes, Stack size 96 bytes, entropy.o(i.mbedtls_entropy_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> az_tlsio_mbedtls.o(i.mbedtls_init)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[5aa]"></a>mbedtls_entropy_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, entropy.o(i.mbedtls_entropy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_entropy_init &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[571]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, gcm.o(i.mbedtls_gcm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</UL>

<P><STRONG><a name="[573]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gcm.o(i.mbedtls_gcm_crypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
</UL>

<P><STRONG><a name="[5ae]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, gcm.o(i.mbedtls_gcm_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_gcm_finish &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[4c0]"></a>mbedtls_gcm_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(i.mbedtls_gcm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
</UL>

<P><STRONG><a name="[4bf]"></a>mbedtls_gcm_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gcm.o(i.mbedtls_gcm_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
</UL>

<P><STRONG><a name="[4be]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gcm.o(i.mbedtls_gcm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[5ad]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 330 bytes, Stack size 64 bytes, gcm.o(i.mbedtls_gcm_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[57c]"></a>mbedtls_gcm_update</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, gcm.o(i.mbedtls_gcm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[d6]"></a>mbedtls_hardware_poll</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, entropy_hardware_poll.o(i.mbedtls_hardware_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_hardware_poll &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Address Reference Count : 2]<UL><LI> entropy.o(i.mbedtls_entropy_init)
<LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[59d]"></a>mbedtls_hmac_drbg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_hmac_drbg_free &rArr; mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[59b]"></a>mbedtls_hmac_drbg_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[d2]"></a>mbedtls_hmac_drbg_random</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecdsa.o(i.mbedtls_ecdsa_sign_det)
</UL>
<P><STRONG><a name="[5b4]"></a>mbedtls_hmac_drbg_random_with_add</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
</UL>

<P><STRONG><a name="[5b6]"></a>mbedtls_hmac_drbg_reseed</STRONG> (Thumb, 98 bytes, Stack size 408 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[59c]"></a>mbedtls_hmac_drbg_seed_buf</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_seed_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbedtls_hmac_drbg_seed_buf &rArr; mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
</UL>

<P><STRONG><a name="[5b7]"></a>mbedtls_hmac_drbg_update</STRONG> (Thumb, 144 bytes, Stack size 112 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_hmac_drbg_update &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[561]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 1052 bytes, Stack size 80 bytes, aes.o(i.mbedtls_internal_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[562]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 1062 bytes, Stack size 76 bytes, aes.o(i.mbedtls_internal_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[610]"></a>mbedtls_md</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, md.o(i.mbedtls_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[616]"></a>mbedtls_md_finish</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[5b3]"></a>mbedtls_md_free</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[690]"></a>mbedtls_md_get_name</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[5b5]"></a>mbedtls_md_get_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[5ba]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 82 bytes, Stack size 80 bytes, md.o(i.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[5b8]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[5bc]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 162 bytes, Stack size 88 bytes, md.o(i.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[5b9]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[59a]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[60f]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[74c]"></a>mbedtls_md_process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_process
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[5bb]"></a>mbedtls_md_setup</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[614]"></a>mbedtls_md_starts</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[615]"></a>mbedtls_md_update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[488]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[478]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[486]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
</UL>

<P><STRONG><a name="[5cd]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[473]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, bignum.o(i.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[424]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[47d]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[5ce]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 800 bytes, Stack size 152 bytes, bignum.o(i.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[5cf]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1146 bytes, Stack size 1672 bytes, bignum.o(i.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[49c]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 52 bytes, Stack size 1040 bytes, bignum.o(i.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[47e]"></a>mbedtls_mpi_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[5d3]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[482]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
</UL>

<P><STRONG><a name="[489]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>

<P><STRONG><a name="[475]"></a>mbedtls_mpi_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[499]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 616 bytes, Stack size 128 bytes, bignum.o(i.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[5d4]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[497]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[48d]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[47b]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[476]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[422]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[490]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_safe_cond_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[483]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[423]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>

<P><STRONG><a name="[49b]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shrink &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
</UL>

<P><STRONG><a name="[56e]"></a>mbedtls_mpi_size</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bignum.o(i.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
</UL>

<P><STRONG><a name="[47c]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[480]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[425]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[56f]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[f8]"></a>mbedtls_net_recv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mbedtls_net.o(i.mbedtls_net_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_net_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[fa]"></a>mbedtls_net_recv_blocking</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, mbedtls_net.o(i.mbedtls_net_recv_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbedtls_net_recv_blocking &rArr; net_sock_setopt &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[f9]"></a>mbedtls_net_send</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mbedtls_net.o(i.mbedtls_net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_net_send &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[5da]"></a>mbedtls_oid_get_attr_short_name</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_attr_short_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_attr_short_name &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[5db]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_ec_grp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[5dc]"></a>mbedtls_oid_get_extended_key_usage</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_extended_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[5dd]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_md_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_md_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>

<P><STRONG><a name="[613]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_oid_by_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[5de]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[5df]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[5e1]"></a>mbedtls_oid_get_sig_alg_desc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_sig_alg_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[5e2]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_x509_ext_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[5ee]"></a>mbedtls_pem_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pem.o(i.mbedtls_pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[5e9]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(i.mbedtls_pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[5e3]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, pem.o(i.mbedtls_pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pem_read_buffer &rArr; mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[5f9]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_can_do))
<BR><BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[41c]"></a>mbedtls_pk_debug</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[766]"></a>mbedtls_pk_encrypt</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, pk.o(i.mbedtls_pk_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_pk_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
</UL>

<P><STRONG><a name="[4dd]"></a>mbedtls_pk_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[5e7]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_bitlen))
<BR><BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
</UL>

<P><STRONG><a name="[679]"></a>mbedtls_pk_get_name</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[684]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[5ea]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[6ca]"></a>mbedtls_pk_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_init))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[5e8]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, pkparse.o(i.mbedtls_pk_parse_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[5f0]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, pkparse.o(i.mbedtls_pk_parse_subpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[5eb]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[5f5]"></a>mbedtls_pk_sign</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[5f7]"></a>mbedtls_pk_verify</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(i.mbedtls_pk_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[5f8]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[6c9]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform.o(i.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[5fb]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 488 bytes, Stack size 192 bytes, rsa.o(i.mbedtls_rsa_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>

<P><STRONG><a name="[5fd]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[5fc]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[5fe]"></a>mbedtls_rsa_free</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>

<P><STRONG><a name="[5ff]"></a>mbedtls_rsa_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[600]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, rsa.o(i.mbedtls_rsa_pkcs1_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3368<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[603]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[606]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[609]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3424<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[60c]"></a>mbedtls_rsa_private</STRONG> (Thumb, 536 bytes, Stack size 144 bytes, rsa.o(i.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[60e]"></a>mbedtls_rsa_public</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[602]"></a>mbedtls_rsa_rsaes_oaep_decrypt</STRONG> (Thumb, 398 bytes, Stack size 1160 bytes, rsa.o(i.mbedtls_rsa_rsaes_oaep_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3320<LI>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[605]"></a>mbedtls_rsa_rsaes_oaep_encrypt</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, rsa.o(i.mbedtls_rsa_rsaes_oaep_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[601]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 300 bytes, Stack size 1064 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[604]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[607]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[60a]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 468 bytes, Stack size 1104 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[608]"></a>mbedtls_rsa_rsassa_pss_sign</STRONG> (Thumb, 350 bytes, Stack size 136 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[60b]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3384<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[5fa]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 424 bytes, Stack size 1176 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
</UL>

<P><STRONG><a name="[139]"></a>mbedtls_sha1</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, sha1.o(i.mbedtls_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[61c]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[61a]"></a>mbedtls_sha1_finish</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, sha1.o(i.mbedtls_sha1_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[61b]"></a>mbedtls_sha1_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_free))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[617]"></a>mbedtls_sha1_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[61d]"></a>mbedtls_sha1_process</STRONG> (Thumb, 4092 bytes, Stack size 144 bytes, sha1.o(i.mbedtls_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[618]"></a>mbedtls_sha1_starts</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sha1.o(i.mbedtls_sha1_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha1_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[619]"></a>mbedtls_sha1_update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[517]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(i.mbedtls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[623]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[621]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, sha256.o(i.mbedtls_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[622]"></a>mbedtls_sha256_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_free))
<BR><BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[61e]"></a>mbedtls_sha256_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[624]"></a>mbedtls_sha256_process</STRONG> (Thumb, 2220 bytes, Stack size 332 bytes, sha256.o(i.mbedtls_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>

<P><STRONG><a name="[61f]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, sha256.o(i.mbedtls_sha256_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_sha256_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[620]"></a>mbedtls_sha256_update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
</UL>

<P><STRONG><a name="[49f]"></a>mbedtls_sha512</STRONG> (Thumb, 54 bytes, Stack size 240 bytes, sha512.o(i.mbedtls_sha512))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_wrap
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_wrap
</UL>

<P><STRONG><a name="[627]"></a>mbedtls_sha512_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_clone_wrap
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[5a8]"></a>mbedtls_sha512_finish</STRONG> (Thumb, 846 bytes, Stack size 56 bytes, sha512.o(i.mbedtls_sha512_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_finish_wrap
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[626]"></a>mbedtls_sha512_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_free))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[625]"></a>mbedtls_sha512_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[628]"></a>mbedtls_sha512_process</STRONG> (Thumb, 2758 bytes, Stack size 944 bytes, sha512.o(i.mbedtls_sha512_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = mbedtls_sha512_process
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_process_wrap
</UL>

<P><STRONG><a name="[5a9]"></a>mbedtls_sha512_starts</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sha512.o(i.mbedtls_sha512_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_sha512_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_starts_wrap
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_starts_wrap
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[4a0]"></a>mbedtls_sha512_update</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, sha512.o(i.mbedtls_sha512_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update_wrap
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha384
</UL>

<P><STRONG><a name="[629]"></a>mbedtls_ssl_check_cert_usage</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_check_cert_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ssl_check_cert_usage &rArr; mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[656]"></a>mbedtls_ssl_check_curve</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_curve))
<BR><BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[759]"></a>mbedtls_ssl_check_sig_hash</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_sig_hash))
<BR><BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[63b]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_ciphersuite_from_id))
<BR><BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[62c]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_close_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
</UL>

<P><STRONG><a name="[5c4]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_authmode))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[6cb]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_ca_chain))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[5c9]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_dbg))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[5c5]"></a>mbedtls_ssl_conf_min_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_min_version))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[62f]"></a>mbedtls_ssl_conf_own_cert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_own_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_conf_own_cert &rArr; ssl_append_key_cert
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[6cd]"></a>mbedtls_ssl_conf_read_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_read_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[5c3]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_rng))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[5c2]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_config_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[4e0]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_config_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_config_free
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[5c0]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_config_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[634]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 1622 bytes, Stack size 424 bytes, ssl_tls.o(i.mbedtls_ssl_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[637]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_fetch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[62d]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_flush_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_flush_output &rArr; mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[4df]"></a>mbedtls_ssl_free</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[636]"></a>mbedtls_ssl_get_ciphersuite_name</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ssl_get_ciphersuite_name
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[756]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_sig_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[767]"></a>mbedtls_ssl_get_max_frag_len</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_max_frag_len))
<BR><BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[63c]"></a>mbedtls_ssl_get_record_expansion</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_get_record_expansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mbedtls_ssl_get_record_expansion &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[6ce]"></a>mbedtls_ssl_get_verify_result</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_verify_result))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[63e]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_handle_message_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[640]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 3960<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[642]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ssl_cli.o(i.mbedtls_ssl_handshake_client_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 3944<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[639]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[641]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 3944<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[651]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_wrapup))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[768]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_hash_from_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[5be]"></a>mbedtls_ssl_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[631]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_list_ciphersuites))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[757]"></a>mbedtls_ssl_md_alg_from_hash</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_md_alg_from_hash))
<BR><BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[753]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_optimize_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[645]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 934 bytes, Stack size 48 bytes, ssl_tls.o(i.mbedtls_ssl_parse_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3920<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[64f]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_parse_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[650]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_parse_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[758]"></a>mbedtls_ssl_pk_alg_from_sig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_pk_alg_from_sig))
<BR><BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[63f]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_prepare_handshake_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[658]"></a>mbedtls_ssl_read</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4064<LI>Call Chain = mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_dowork
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv_mbedtls
</UL>

<P><STRONG><a name="[653]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[65c]"></a>mbedtls_ssl_read_record_layer</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_read_record_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[752]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_read_version))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[660]"></a>mbedtls_ssl_renegotiate</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4008<LI>Call Chain = mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>

<P><STRONG><a name="[62e]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_send_alert_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[63a]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_session_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[5bf]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_session_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[5c6]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[5c7]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_set_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_set_hostname &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[5c8]"></a>mbedtls_ssl_set_session</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_ssl_set_session &rArr; ssl_session_copy &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[5cb]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[664]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_sig_from_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_sig_from_pk
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[638]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_transform_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[65d]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_update_handshake_status))
<BR><BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[665]"></a>mbedtls_ssl_write</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056<LI>Call Chain = mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_send
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send_mbedtls
</UL>

<P><STRONG><a name="[649]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_cert
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[64c]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[64d]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[661]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[668]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_write_version))
<BR><BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[4de]"></a>mbedtls_x509_crl_free</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, x509_crl.o(i.mbedtls_x509_crl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_x509_crl_free
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[66b]"></a>mbedtls_x509_crl_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509_crl.o(i.mbedtls_x509_crl_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[66c]"></a>mbedtls_x509_crl_parse</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, x509_crl.o(i.mbedtls_x509_crl_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mbedtls_x509_crl_parse &rArr; mbedtls_x509_crl_parse_der &rArr; mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[66d]"></a>mbedtls_x509_crl_parse_der</STRONG> (Thumb, 666 bytes, Stack size 80 bytes, x509_crl.o(i.mbedtls_x509_crl_parse_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = mbedtls_x509_crl_parse_der &rArr; mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_free
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
</UL>

<P><STRONG><a name="[62b]"></a>mbedtls_x509_crt_check_extended_key_usage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, x509_crt.o(i.mbedtls_x509_crt_check_extended_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[62a]"></a>mbedtls_x509_crt_check_key_usage</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, x509_crt.o(i.mbedtls_x509_crt_check_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[4dc]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, x509_crt.o(i.mbedtls_x509_crt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>

<P><STRONG><a name="[584]"></a>mbedtls_x509_crt_info</STRONG> (Thumb, 986 bytes, Stack size 96 bytes, x509_crt.o(i.mbedtls_x509_crt_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_name
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[5c1]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x509_crt.o(i.mbedtls_x509_crt_init))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[67d]"></a>mbedtls_x509_crt_is_revoked</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, x509_crt.o(i.mbedtls_x509_crt_is_revoked))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_x509_crt_is_revoked &rArr; mbedtls_x509_time_is_past &rArr; x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[67f]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, x509_crt.o(i.mbedtls_x509_crt_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[654]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_parse_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[681]"></a>mbedtls_x509_crt_verify_info</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_crt_verify_info &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
</UL>

<P><STRONG><a name="[655]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_with_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 3872<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[677]"></a>mbedtls_x509_dn_gets</STRONG> (Thumb, 230 bytes, Stack size 296 bytes, x509.o(i.mbedtls_x509_dn_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mbedtls_x509_dn_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[66e]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[68a]"></a>mbedtls_x509_get_alg_null</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_get_alg_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[673]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[670]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, x509.o(i.mbedtls_x509_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_x509_get_name &rArr; x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[68c]"></a>mbedtls_x509_get_rsassa_pss_params</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, x509.o(i.mbedtls_x509_get_rsassa_pss_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[68e]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
</UL>

<P><STRONG><a name="[674]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[66f]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[671]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_parse_int
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
</UL>

<P><STRONG><a name="[67a]"></a>mbedtls_x509_key_size_helper</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_key_size_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_x509_key_size_helper &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[676]"></a>mbedtls_x509_serial_gets</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, x509.o(i.mbedtls_x509_serial_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_serial_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[678]"></a>mbedtls_x509_sig_alg_gets</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, x509.o(i.mbedtls_x509_sig_alg_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_sig_alg_gets &rArr; mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_name
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[691]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_time_is_future))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_x509_time_is_future &rArr; x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_time
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[67e]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_time_is_past))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_x509_time_is_past &rArr; x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_time
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[694]"></a>mem_free</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[52a]"></a>mem_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[450]"></a>mem_malloc</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mem_malloc &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[697]"></a>mem_trim</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mem_trim &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[4f8]"></a>memp_free</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>

<P><STRONG><a name="[52b]"></a>memp_init</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[698]"></a>memp_init_pool</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, memp.o(i.memp_init_pool))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[4eb]"></a>memp_malloc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
</UL>

<P><STRONG><a name="[3bf]"></a>mqtt_client_connect</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, mqtt_client.o(i.mqtt_client_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mqtt_client_connect &rArr; cloneMqttOptions &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[4bd]"></a>mqtt_client_deinit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mqtt_client.o(i.mqtt_client_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mqtt_client_deinit &rArr; clear_mqtt_options &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
</UL>

<P><STRONG><a name="[29b]"></a>mqtt_client_disconnect</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, mqtt_client.o(i.mqtt_client_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mqtt_client_disconnect &rArr; sendPacketItem &rArr; logOutgoingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>

<P><STRONG><a name="[35a]"></a>mqtt_client_dowork</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, mqtt_client.o(i.mqtt_client_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mqtt_client_dowork &rArr; sendPacketItem &rArr; logOutgoingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[301]"></a>mqtt_client_init</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, mqtt_client.o(i.mqtt_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqtt_client_init &rArr; tickcounter_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_create
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[6a0]"></a>mqtt_client_publish</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, mqtt_client.o(i.mqtt_client_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getTopicName
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getQosType
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getPacketId
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsRetained
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsDuplicateMsg
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getApplicationMsg
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
</UL>

<P><STRONG><a name="[35c]"></a>mqtt_client_set_trace</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqtt_client.o(i.mqtt_client_set_trace))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>

<P><STRONG><a name="[3c0]"></a>mqtt_client_subscribe</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, mqtt_client.o(i.mqtt_client_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mqtt_client_subscribe &rArr; mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
</UL>

<P><STRONG><a name="[360]"></a>mqtt_client_unsubscribe</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, mqtt_client.o(i.mqtt_client_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
</UL>

<P><STRONG><a name="[6aa]"></a>mqtt_codec_bytesReceived</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, mqtt_codec.o(i.mqtt_codec_bytesReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mqtt_codec_bytesReceived &rArr; prepareheaderDataInfo &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processControlPacketType
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePacketData
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onBytesReceived
</UL>

<P><STRONG><a name="[6ad]"></a>mqtt_codec_connect</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mqtt_codec.o(i.mqtt_codec_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mqtt_codec_connect &rArr; constructConnPayload &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[69f]"></a>mqtt_codec_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqtt_codec.o(i.mqtt_codec_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mqtt_codec_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
</UL>

<P><STRONG><a name="[69a]"></a>mqtt_codec_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mqtt_codec.o(i.mqtt_codec_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mqtt_codec_destroy &rArr; BUFFER_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
</UL>

<P><STRONG><a name="[69b]"></a>mqtt_codec_disconnect</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqtt_codec.o(i.mqtt_codec_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqtt_codec_disconnect &rArr; BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
</UL>

<P><STRONG><a name="[69e]"></a>mqtt_codec_ping</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqtt_codec.o(i.mqtt_codec_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqtt_codec_ping &rArr; BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
</UL>

<P><STRONG><a name="[6a7]"></a>mqtt_codec_publish</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, mqtt_codec.o(i.mqtt_codec_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[6ae]"></a>mqtt_codec_publishAck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mqtt_codec_publishAck &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[6af]"></a>mqtt_codec_publishComplete</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mqtt_codec_publishComplete &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[6b0]"></a>mqtt_codec_publishReceived</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mqtt_codec_publishReceived &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[6b1]"></a>mqtt_codec_publishRelease</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mqtt_codec_publishRelease &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[6a8]"></a>mqtt_codec_subscribe</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, mqtt_codec.o(i.mqtt_codec_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
</UL>

<P><STRONG><a name="[6a9]"></a>mqtt_codec_unsubscribe</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, mqtt_codec.o(i.mqtt_codec_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
</UL>

<P><STRONG><a name="[6b8]"></a>mqttmessage_create</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, mqtt_message.o(i.mqttmessage_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqttmessage_create &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
</UL>

<P><STRONG><a name="[6b9]"></a>mqttmessage_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mqtt_message.o(i.mqttmessage_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mqttmessage_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
</UL>

<P><STRONG><a name="[6a1]"></a>mqttmessage_getApplicationMsg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getApplicationMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getApplicationMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[6a3]"></a>mqttmessage_getIsDuplicateMsg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getIsDuplicateMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getIsDuplicateMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[6a4]"></a>mqttmessage_getIsRetained</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getIsRetained))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getIsRetained
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[6a5]"></a>mqttmessage_getPacketId</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getPacketId))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getPacketId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[6a2]"></a>mqttmessage_getQosType</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getQosType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getQosType
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[6a6]"></a>mqttmessage_getTopicName</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getTopicName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getTopicName
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[6ba]"></a>mqttmessage_setIsDuplicateMsg</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_setIsDuplicateMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_setIsDuplicateMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[6bb]"></a>mqttmessage_setIsRetained</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_setIsRetained))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_setIsRetained
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[6bd]"></a>net_deinit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, net.o(i.net_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_deinit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_deinit
</UL>

<P><STRONG><a name="[6be]"></a>net_get_ip_address</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, net.o(i.net_get_ip_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_get_ip_address &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[4e5]"></a>net_get_mac_address</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, net.o(i.net_get_mac_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_get_mac_address &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[107]"></a>net_if_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip_net.o(i.net_if_deinit))
<BR>[Address Reference Count : 1]<UL><LI> cloud.o(i.platform_deinit)
</UL>
<P><STRONG><a name="[108]"></a>net_if_init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lwip_net.o(i.net_if_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = net_if_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud.o(i.platform_init)
</UL>
<P><STRONG><a name="[6c3]"></a>net_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, net.o(i.net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[6c4]"></a>net_sock_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net.o(i.net_sock_close))
<BR><BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_close
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[f5]"></a>net_sock_close_mbedtls</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, net_tls_mbedtls.o(i.net_sock_close_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = net_sock_close_mbedtls &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[f0]"></a>net_sock_close_tcp_lwip</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, net_tcp_lwip.o(i.net_sock_close_tcp_lwip))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = net_sock_close_tcp_lwip &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tcp_lwip.o(i.net_sock_create_lwip)
</UL>
<P><STRONG><a name="[6c6]"></a>net_sock_create</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net.o(i.net_sock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = net_sock_create &rArr; net_sock_create_mbedtls &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_mbedtls
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create_lwip
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_create
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[6c7]"></a>net_sock_create_lwip</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, net_tcp_lwip.o(i.net_sock_create_lwip))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_sock_create_lwip &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
</UL>

<P><STRONG><a name="[6c8]"></a>net_sock_create_mbedtls</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, net_tls_mbedtls.o(i.net_sock_create_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_sock_create_mbedtls &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
</UL>

<P><STRONG><a name="[6c5]"></a>net_sock_destroy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net.o(i.net_sock_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_destroy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[f6]"></a>net_sock_destroy_mbedtls</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, net_tls_mbedtls.o(i.net_sock_destroy_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = net_sock_destroy_mbedtls &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[f1]"></a>net_sock_destroy_tcp_lwip</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, net_tcp_lwip.o(i.net_sock_destroy_tcp_lwip))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_sock_destroy_tcp_lwip &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tcp_lwip.o(i.net_sock_create_lwip)
</UL>
<P><STRONG><a name="[6cc]"></a>net_sock_open</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, net.o(i.net_sock_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_sock_open
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[eb]"></a>net_sock_open_lwip</STRONG> (Thumb, 382 bytes, Stack size 112 bytes, net_tcp_lwip.o(i.net_sock_open_lwip))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = net_sock_open_lwip &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tcp_lwip.o(i.net_sock_create_lwip)
</UL>
<P><STRONG><a name="[f2]"></a>net_sock_open_mbedtls</STRONG> (Thumb, 988 bytes, Stack size 552 bytes, net_tls_mbedtls.o(i.net_sock_open_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = net_sock_open_mbedtls &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_set_threshold
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_verify_result
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[5d7]"></a>net_sock_recv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net.o(i.net_sock_recv))
<BR><BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_receive
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
</UL>

<P><STRONG><a name="[f3]"></a>net_sock_recv_mbedtls</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, net_tls_mbedtls.o(i.net_sock_recv_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 4104<LI>Call Chain = net_sock_recv_mbedtls &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timeout_left_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[ec]"></a>net_sock_recv_tcp_lwip</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, net_tcp_lwip.o(i.net_sock_recv_tcp_lwip))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = net_sock_recv_tcp_lwip &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tcp_lwip.o(i.net_sock_create_lwip)
</UL>
<P><STRONG><a name="[ee]"></a>net_sock_recvfrom_udp_lwip</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, net_tcp_lwip.o(i.net_sock_recvfrom_udp_lwip))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = net_sock_recvfrom_udp_lwip &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tcp_lwip.o(i.net_sock_create_lwip)
</UL>
<P><STRONG><a name="[5d9]"></a>net_sock_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net.o(i.net_sock_send))
<BR><BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_send
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
</UL>

<P><STRONG><a name="[f4]"></a>net_sock_send_mbedtls</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, net_tls_mbedtls.o(i.net_sock_send_mbedtls))
<BR><BR>[Stack]<UL><LI>Max Depth = 4096<LI>Call Chain = net_sock_send_mbedtls &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timeout_left_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_create_mbedtls)
</UL>
<P><STRONG><a name="[ed]"></a>net_sock_send_tcp_lwip</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, net_tcp_lwip.o(i.net_sock_send_tcp_lwip))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = net_sock_send_tcp_lwip &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tcp_lwip.o(i.net_sock_create_lwip)
</UL>
<P><STRONG><a name="[ef]"></a>net_sock_sendto_udp_lwip</STRONG> (Thumb, 150 bytes, Stack size 80 bytes, net_tcp_lwip.o(i.net_sock_sendto_udp_lwip))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = net_sock_sendto_udp_lwip &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tcp_lwip.o(i.net_sock_create_lwip)
</UL>
<P><STRONG><a name="[5d8]"></a>net_sock_setopt</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, net.o(i.net_sock_setopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = net_sock_setopt &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_set_blocking
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_blocking
</UL>

<P><STRONG><a name="[6cf]"></a>net_timeout_left_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(i.net_timeout_left_ms))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send_mbedtls
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv_mbedtls
</UL>

<P><STRONG><a name="[4bc]"></a>netbuf_delete</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sockets.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[552]"></a>netbuf_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sockets.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[550]"></a>netbuf_ref</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sockets.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[6d0]"></a>netconn_alloc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, sockets.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = netconn_alloc &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[51e]"></a>netconn_bind</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sockets.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[524]"></a>netconn_connect</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sockets.o(i.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[521]"></a>netconn_delete</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sockets.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[523]"></a>netconn_disconnect</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sockets.o(i.netconn_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_disconnect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[6d7]"></a>netconn_free</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sockets.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[54c]"></a>netconn_getaddr</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sockets.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[527]"></a>netconn_gethostbyname</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sockets.o(i.netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[559]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, sockets.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[54b]"></a>netconn_recv</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sockets.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[54a]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sockets.o(i.netconn_recv_tcp_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[551]"></a>netconn_send</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sockets.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_send &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[557]"></a>netconn_shutdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sockets.o(i.netconn_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[54f]"></a>netconn_write_partly</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, sockets.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = netconn_write_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[6c0]"></a>netif_add</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
</UL>

<P><STRONG><a name="[52c]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[42c]"></a>netif_set_addr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[6c1]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
</UL>

<P><STRONG><a name="[6e0]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[6e1]"></a>netif_set_ipaddr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[6df]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[6c2]"></a>netif_set_up</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
</UL>

<P><STRONG><a name="[55e]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e8]"></a>osKernelSysTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[6ec]"></a>osMessageCreate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[6ee]"></a>osMessageDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osMessageDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMessageDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[6f0]"></a>osMessageGet</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[6f3]"></a>osMessagePut</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[6f6]"></a>osMessageWaiting</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmsis_os.o(i.osMessageWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMessageWaiting &rArr; uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[6f9]"></a>osMutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[6fb]"></a>osMutexRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[6fd]"></a>osMutexWait</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>

<P><STRONG><a name="[51a]"></a>osSemaphoreCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[6ff]"></a>osSemaphoreDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[2bd]"></a>osSemaphoreRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>

<P><STRONG><a name="[4b4]"></a>osSemaphoreWait</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[3c1]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[36b]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
</UL>

<P><STRONG><a name="[36c]"></a>osThreadTerminate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
</UL>

<P><STRONG><a name="[434]"></a>pbuf_alloc</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[4ec]"></a>pbuf_alloced_custom</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_alloced_custom &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[4ed]"></a>pbuf_cat</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[712]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[4f4]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[4af]"></a>pbuf_copy</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[44a]"></a>pbuf_copy_partial</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[43f]"></a>pbuf_free</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[4b1]"></a>pbuf_header</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4f2]"></a>pbuf_header_force</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[461]"></a>pbuf_put_at</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_put_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_put_at
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[43c]"></a>pbuf_realloc</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4b0]"></a>pbuf_ref</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pbuf_ref &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[714]"></a>pbuf_skip</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_skip))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
</UL>

<P><STRONG><a name="[460]"></a>pbuf_take</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_take &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[462]"></a>pbuf_take_at</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_take_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[45a]"></a>pbuf_try_get_at</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_try_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_try_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>

<P><STRONG><a name="[4e8]"></a>platform_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cloud.o(i.platform_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = platform_deinit &rArr; net_deinit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[4c3]"></a>platform_get_default_tlsio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, az_platform_stm32cube.o(i.platform_get_default_tlsio))
<BR><BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_get_interface_description
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTransportProvider
</UL>

<P><STRONG><a name="[55f]"></a>platform_get_platform_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, az_platform_stm32cube.o(i.platform_get_platform_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = platform_get_platform_info &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
</UL>

<P><STRONG><a name="[4e3]"></a>platform_init</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, cloud.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = platform_init &rArr; setRTCTimeDateFromNetwork &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_mac_address
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_needs_device_keypair
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip_address
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForPush
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTLSRootCA
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTLSDeviceConfig
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkIoTDeviceConfig
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_ask
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[6ac]"></a>processControlPacketType</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqtt_codec.o(i.processControlPacketType))
<BR><BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
</UL>

<P><STRONG><a name="[735]"></a>pvPortMalloc</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[7ae]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[730]"></a>pxPortInitialiseStack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1c6]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
</UL>

<P><STRONG><a name="[2fe]"></a>retry_control_create</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, iothub_client_retry_control.o(i.retry_control_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = retry_control_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_reset
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[35f]"></a>retry_control_destroy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, iothub_client_retry_control.o(i.retry_control_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = retry_control_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
</UL>

<P><STRONG><a name="[6b6]"></a>retry_control_reset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iothub_client_retry_control.o(i.retry_control_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = retry_control_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
</UL>

<P><STRONG><a name="[2f8]"></a>retry_control_should_retry</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, iothub_client_retry_control.o(i.retry_control_should_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = retry_control_should_retry &rArr; calculate_next_wait_time &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[249]"></a>scanbase64b16</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, agenttypesystem.o(i.scanbase64b16))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = scanbase64b16 &rArr; base64b16
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b16
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[24a]"></a>scanbase64b8</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, agenttypesystem.o(i.scanbase64b8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scanbase64b8
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b8
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[4e7]"></a>serializer_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schemalib.o(i.serializer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = serializer_deinit &rArr; CodeFirst_Deinit &rArr; DestroyDevice &rArr; Device_Destroy &rArr; DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>

<P><STRONG><a name="[40b]"></a>setIoTDeviceConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, iot_flash_config.o(i.setIoTDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = setIoTDeviceConfig &rArr; FLASH_update &rArr; FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
</UL>

<P><STRONG><a name="[71c]"></a>setRTCTimeDateFromNetwork</STRONG> (Thumb, 1524 bytes, Stack size 1144 bytes, timedate.o(i.setRTCTimeDateFromNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = setRTCTimeDateFromNetwork &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[3f0]"></a>singlylinkedlist_add</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, singlylinkedlist.o(i.singlylinkedlist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = singlylinkedlist_add &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
</UL>

<P><STRONG><a name="[73c]"></a>singlylinkedlist_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, singlylinkedlist.o(i.singlylinkedlist_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = singlylinkedlist_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
</UL>

<P><STRONG><a name="[73d]"></a>singlylinkedlist_destroy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, singlylinkedlist.o(i.singlylinkedlist_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = singlylinkedlist_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
</UL>

<P><STRONG><a name="[73e]"></a>singlylinkedlist_get_head_item</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, singlylinkedlist.o(i.singlylinkedlist_get_head_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = singlylinkedlist_get_head_item
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_send
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[73f]"></a>singlylinkedlist_item_get_value</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, singlylinkedlist.o(i.singlylinkedlist_item_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = singlylinkedlist_item_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[740]"></a>singlylinkedlist_remove</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, singlylinkedlist.o(i.singlylinkedlist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = singlylinkedlist_remove &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[417]"></a>size_tToString</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, crt_abstractions.o(i.size_tToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = size_tToString
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[15f]"></a>socketio_close</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, az_socketio_mbed.o(i.socketio_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = socketio_close
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>socketio_create</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, az_socketio_mbed.o(i.socketio_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = socketio_create &rArr; singlylinkedlist_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_create
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>socketio_destroy</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, az_socketio_mbed.o(i.socketio_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = socketio_destroy &rArr; singlylinkedlist_remove &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>socketio_dowork</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, az_socketio_mbed.o(i.socketio_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = socketio_dowork &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_send
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_receive
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[797]"></a>socketio_get_interface_description</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, az_socketio_mbed.o(i.socketio_get_interface_description))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
</UL>

<P><STRONG><a name="[15e]"></a>socketio_open</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, az_socketio_mbed.o(i.socketio_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = socketio_open &rArr; tcpsocketconnection_set_blocking &rArr; net_sock_setopt &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_set_blocking
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_destroy
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_create
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>socketio_send</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, az_socketio_mbed.o(i.socketio_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = socketio_send &rArr; add_pending_io &rArr; singlylinkedlist_add &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_send
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>socketio_setoption</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, az_socketio_mbed.o(i.socketio_setoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = socketio_setoption &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> az_socketio_mbed.o(i.socketio_retrieveoptions)
<LI> az_socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>sprintf_s</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, crt_abstractions.o(i.sprintf_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sprintf_s &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[3de]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[560]"></a>strcpy_s</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, crt_abstractions.o(i.strcpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strcpy_s &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
</UL>

<P><STRONG><a name="[246]"></a>strncpy_s</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, crt_abstractions.o(i.strncpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncpy_s &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
</UL>

<P><STRONG><a name="[6dd]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sys_arch_mbox_fetch &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[6d8]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[3f8]"></a>sys_arch_protect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[534]"></a>sys_arch_sem_wait</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[3f9]"></a>sys_arch_unprotect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_arch.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[529]"></a>sys_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_init &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6d2]"></a>sys_mbox_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_mbox_free &rArr; osMessageDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[6d1]"></a>sys_mbox_new</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_mbox_new &rArr; osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[76a]"></a>sys_mbox_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sys_mbox_post &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[6d3]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[4a2]"></a>sys_mbox_trypost</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mbox_trypost &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
</UL>

<P><STRONG><a name="[4a1]"></a>sys_mbox_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
</UL>

<P><STRONG><a name="[53d]"></a>sys_now</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernetif.o(i.sys_now))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[6d9]"></a>sys_sem_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_sem_free &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[696]"></a>sys_sem_new</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_sem_new &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[6da]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[4a4]"></a>sys_sem_signal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
</UL>

<P><STRONG><a name="[4a3]"></a>sys_sem_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
</UL>

<P><STRONG><a name="[76b]"></a>sys_thread_new</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sys_thread_new &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[41a]"></a>sys_timeout</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, timeouts.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[530]"></a>sys_timeouts_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[76c]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[76d]"></a>tcp_abandon</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
</UL>

<P><STRONG><a name="[53e]"></a>tcp_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[537]"></a>tcp_accept</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[771]"></a>tcp_alloc</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
</UL>

<P><STRONG><a name="[535]"></a>tcp_arg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[531]"></a>tcp_bind</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[53b]"></a>tcp_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_close))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[540]"></a>tcp_connect</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[77c]"></a>tcp_eff_send_mss_impl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcp.o(i.tcp_eff_send_mss_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[77d]"></a>tcp_enqueue_flags</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[53a]"></a>tcp_err</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[780]"></a>tcp_fasttmr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[52e]"></a>tcp_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcp.o(i.tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4f1]"></a>tcp_input</STRONG> (Thumb, 1448 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[787]"></a>tcp_keepalive</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[6e2]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[716]"></a>tcp_new_ip_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[77b]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[547]"></a>tcp_output</STRONG> (Thumb, 562 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[776]"></a>tcp_pcb_purge</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[76e]"></a>tcp_pcb_remove</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[539]"></a>tcp_poll</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_poll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[781]"></a>tcp_process_refused_data</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[536]"></a>tcp_recv</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[110]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[543]"></a>tcp_recved</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[790]"></a>tcp_rexmit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[791]"></a>tcp_rexmit_fast</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[78e]"></a>tcp_rexmit_rto</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[770]"></a>tcp_rst</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[77f]"></a>tcp_seg_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[76f]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[784]"></a>tcp_send_empty_ack</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[77a]"></a>tcp_send_fin</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[538]"></a>tcp_sent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[53c]"></a>tcp_shutdown</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[793]"></a>tcp_slowtmr</STRONG> (Thumb, 752 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[774]"></a>tcp_timer_needed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[181]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[777]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[792]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[546]"></a>tcp_write</STRONG> (Thumb, 1620 bytes, Stack size 128 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[794]"></a>tcp_zero_window_probe</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[6db]"></a>tcpip_callback_with_block</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcpip_callback_with_block &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[6bf]"></a>tcpip_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
</UL>

<P><STRONG><a name="[6d5]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_send_msg_wait_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[741]"></a>tcpsocketconnection_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, az_tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_close))
<BR><BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_close
</UL>

<P><STRONG><a name="[747]"></a>tcpsocketconnection_connect</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, az_tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcpsocketconnection_connect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
</UL>

<P><STRONG><a name="[746]"></a>tcpsocketconnection_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, az_tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcpsocketconnection_create &rArr; net_sock_create &rArr; net_sock_create_mbedtls &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_create
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
</UL>

<P><STRONG><a name="[742]"></a>tcpsocketconnection_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, az_tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_destroy))
<BR><BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[745]"></a>tcpsocketconnection_receive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, az_tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_receive))
<BR><BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[743]"></a>tcpsocketconnection_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, az_tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_send))
<BR><BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_send
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_send
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[748]"></a>tcpsocketconnection_set_blocking</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, az_tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_set_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcpsocketconnection_set_blocking &rArr; net_sock_setopt &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_setopt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
</UL>

<P><STRONG><a name="[2fd]"></a>tickcounter_create</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, az_tickcounter_stm32cube.o(i.tickcounter_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tickcounter_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[31b]"></a>tickcounter_destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, az_tickcounter_stm32cube.o(i.tickcounter_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tickcounter_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
</UL>

<P><STRONG><a name="[29e]"></a>tickcounter_get_current_ms</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, az_tickcounter_stm32cube.o(i.tickcounter_get_current_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tickcounter_get_current_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_ms_timesOutAfter
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[40e]"></a>time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timingsystem.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consolelogger_log
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[17e]"></a>tlsio_mbedtls_close</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsio_mbedtls_close &rArr; xio_close
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>tlsio_mbedtls_create</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1516<LI>Call Chain = tlsio_mbedtls_create &rArr; mbedtls_init &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_get_interface_description
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>tlsio_mbedtls_destroy</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = tlsio_mbedtls_destroy &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>tlsio_mbedtls_dowork</STRONG> (Thumb, 70 bytes, Stack size 80 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 4144<LI>Call Chain = tlsio_mbedtls_dowork &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[717]"></a>tlsio_mbedtls_get_interface_description</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_get_interface_description))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_default_tlsio
</UL>

<P><STRONG><a name="[17d]"></a>tlsio_mbedtls_open</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tlsio_mbedtls_open &rArr; xio_open
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>tlsio_mbedtls_retrieveoptions</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tlsio_mbedtls_retrieveoptions &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_AddOption
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>tlsio_mbedtls_send</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 4072<LI>Call Chain = tlsio_mbedtls_send &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>tlsio_mbedtls_setoption</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_setoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tlsio_mbedtls_setoption &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> az_tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
<LI> az_tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[446]"></a>udp_bind</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[447]"></a>udp_connect</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[541]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</UL>

<P><STRONG><a name="[52d]"></a>udp_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, udp.o(i.udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4f0]"></a>udp_input</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[6e3]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[445]"></a>udp_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
</UL>

<P><STRONG><a name="[455]"></a>udp_new_ip_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, udp.o(i.udp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[448]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[439]"></a>udp_remove</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[544]"></a>udp_send</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[463]"></a>udp_sendto</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[44b]"></a>udp_sendto_if</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[43d]"></a>udp_sendto_if_src</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[71b]"></a>updateTLSCredentials</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, iot_flash_config.o(i.updateTLSCredentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = updateTLSCredentials &rArr; CaptureAndFlashPem &rArr; FLASH_update &rArr; FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_needs_device_keypair
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTLSRootCA
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_ask
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[71f]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[6f8]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
</UL>

<P><STRONG><a name="[6f7]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, queue.o(i.uxQueueMessagesWaitingFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
</UL>

<P><STRONG><a name="[723]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[72f]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[720]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[724]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[722]"></a>vPortEnterCritical</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[725]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[72d]"></a>vPortFree</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[7a9]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[798]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[6ef]"></a>vQueueDelete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
</UL>

<P><STRONG><a name="[79a]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[188]"></a>vTask1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vTask1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>vTask2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vTask2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[704]"></a>vTaskDelete</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[734]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[79c]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[79d]"></a>vTaskPriorityInherit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[7af]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[6e7]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[727]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[18f]"></a>vTaskSwitchContext</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[79e]"></a>xPortStartScheduler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[701]"></a>xPortSysTickHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[6fe]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[6fa]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[6ed]"></a>xQueueGenericCreate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[6f2]"></a>xQueueGenericReceive</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[7ad]"></a>xQueueGenericReset</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[6f5]"></a>xQueueGenericSend</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[6f4]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[6fc]"></a>xQueueGiveFromISR</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[6f1]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[7b0]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[703]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[700]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[6eb]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[6ea]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[7ac]"></a>xTaskIncrementTick</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[72c]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[733]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[728]"></a>xTaskResumeAll</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[407]"></a>xio_close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, xio.o(i.xio_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xio_close
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_close
</UL>

<P><STRONG><a name="[4c4]"></a>xio_create</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xio.o(i.xio_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xio_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTransportProvider
</UL>

<P><STRONG><a name="[29c]"></a>xio_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xio.o(i.xio_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xio_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>

<P><STRONG><a name="[408]"></a>xio_dowork</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xio.o(i.xio_dowork))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_dowork
</UL>

<P><STRONG><a name="[699]"></a>xio_open</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, xio.o(i.xio_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xio_open
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_open
</UL>

<P><STRONG><a name="[299]"></a>xio_retrieveoptions</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, xio.o(i.xio_retrieveoptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_AddOption
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>

<P><STRONG><a name="[6e4]"></a>xio_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, xio.o(i.xio_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xio_send
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_send
</UL>

<P><STRONG><a name="[11b]"></a>xio_setoption</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, xio.o(i.xio_setoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xio_setoption &rArr; OptionHandler_FeedOptions &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xio.o(i.xio_retrieveoptions)
</UL>
<P><STRONG><a name="[1c3]"></a>xlogging_get_log_function</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xlogging.o(i.xlogging_get_log_function))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyType
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyName
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByIndex_Offset
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodByName
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_offset
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyCount
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyByIndex
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentCount
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentByIndex
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentType
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentName
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentType
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentName
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddDeviceRef
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendComplete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onIoError
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onBytesReceived
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logOutgoingRawTrace
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logIncomingRawTrace
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_read_uint16
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readByte
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInvokeMethod
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInvokeAction
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_EDM_BOOLEAN_from_int
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteMethod
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteCommand
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DestroyTransaction_ReportedProperties
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CreateTransaction_ReportedProperties
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CommitTransaction_ReportedProperties
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Create
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Destroy
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildCount
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChild
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_clear
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyByIndex
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsRetained
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsDuplicateMsg
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getTopicName
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getQosType
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getPacketId
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsRetained
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsDuplicateMsg
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getApplicationMsg
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_GetContent
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encoder
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_CreateString
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_AddOption
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_DestroyOption
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_CloneOption
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_add
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_DestroyOption
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_CloneOption
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetMessageCallback
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceTwinCallback
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceMethodCallback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootWRAPPER
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelloWRAPPER
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromAGENT_DATA_TYPE_ascii_char_ptr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_open
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_ms_timesOutAfter
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetDiagnosticPropertyData
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_epoch_time
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_CreateFromDeviceAuth
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_reset
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_destroy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentTypeSystemProperty
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentEncodingSystemProperty
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetMessageId
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetDiagnosticPropertyData
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetCorrelationId
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentTypeSystemProperty
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentEncodingSystemProperty
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_RetrievePropertyComplete
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ReportedStateComplete
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_MessageCallback
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_GetOption
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DeviceMethodComplete
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ConnectionStatusCallBack
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_xio_Certificate
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_DeviceKey
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetSendStatus
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetHostname
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_error_callback
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTransportProvider
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetRetryPolicy
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c2]"></a>AddModelProperty</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, schema.o(i.AddModelProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AddModelProperty &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelProperty
</UL>

<P><STRONG><a name="[290]"></a>DestroyMethods</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, schema.o(i.DestroyMethods))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DestroyMethods &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[291]"></a>DestroyModel</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, schema.o(i.DestroyModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DestroyModel &rArr; DestroyMethods &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyProperty
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_clear
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
</UL>

<P><STRONG><a name="[292]"></a>DestroyProperty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.DestroyProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DestroyProperty &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[b0]"></a>SchemaHandlesMatch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, schema.o(i.SchemaHandlesMatch))
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_Destroy)
</UL>
<P><STRONG><a name="[b3]"></a>SchemaNamespacesMatch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.SchemaNamespacesMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SchemaNamespacesMatch &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_GetSchemaByNamespace)
</UL>
<P><STRONG><a name="[ac]"></a>desiredPropertyExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.desiredPropertyExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = desiredPropertyExists &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_AddModelDesiredProperty)
</UL>
<P><STRONG><a name="[b1]"></a>matchModelMethod</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.matchModelMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = matchModelMethod &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_GetModelMethodByName)
</UL>
<P><STRONG><a name="[b2]"></a>matchModelName</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, schema.o(i.matchModelName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = matchModelName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_GetModelModelByName)
</UL>
<P><STRONG><a name="[af]"></a>methodExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.methodExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = methodExists &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_CreateModelMethod)
</UL>
<P><STRONG><a name="[ad]"></a>methodFindArgumentByBame</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.methodFindArgumentByBame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = methodFindArgumentByBame &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_AddModelMethodArgument)
</UL>
<P><STRONG><a name="[ae]"></a>reportedPropertyExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.reportedPropertyExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reportedPropertyExists &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> schema.o(i.Schema_AddModelReportedProperty)
<LI> schema.o(i.Schema_ModelReportedPropertyByPathExists)
</UL>
<P><STRONG><a name="[a1]"></a>reportedPropertyExistsByPath</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, datapublisher.o(i.reportedPropertyExistsByPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reportedPropertyExistsByPath &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datapublisher.o(i.DataPublisher_PublishTransacted_ReportedProperty)
</UL>
<P><STRONG><a name="[376]"></a>createLeaf</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, multitree.o(i.createLeaf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = createLeaf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChildByName
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
</UL>

<P><STRONG><a name="[378]"></a>getChildByName</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, multitree.o(i.getChildByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getChildByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
</UL>

<P><STRONG><a name="[274]"></a>DecodeAndExecuteModelAction</STRONG> (Thumb, 414 bytes, Stack size 208 bytes, commanddecoder.o(i.DecodeAndExecuteModelAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentCount
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentByIndex
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentType
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentName
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
</UL>

<P><STRONG><a name="[27d]"></a>DecodeAndExecuteModelMethod</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, commanddecoder.o(i.DecodeAndExecuteModelMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodByName
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentType
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentName
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
</UL>

<P><STRONG><a name="[233]"></a>DecodeCommand</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, commanddecoder.o(i.DecodeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaForModelType
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
</UL>

<P><STRONG><a name="[235]"></a>DecodeMethod</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, commanddecoder.o(i.DecodeMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaForModelType
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
</UL>

<P><STRONG><a name="[27c]"></a>DecodeValueFromNode</STRONG> (Thumb, 498 bytes, Stack size 80 bytes, commanddecoder.o(i.DecodeValueFromNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyType
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyName
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_GetPrimitiveType
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyByIndex
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[285]"></a>ScanActionPathAndExecuteAction</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, commanddecoder.o(i.ScanActionPathAndExecuteAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
</UL>

<P><STRONG><a name="[286]"></a>ScanMethodPathAndExecuteMethod</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, commanddecoder.o(i.ScanMethodPathAndExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
</UL>

<P><STRONG><a name="[205]"></a>CodeFirst_Init_impl</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, codefirst.o(i.CodeFirst_Init_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CodeFirst_Init_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
</UL>

<P><STRONG><a name="[20c]"></a>DestroyDevice</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, codefirst.o(i.DestroyDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DestroyDevice &rArr; Device_Destroy &rArr; DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
</UL>

<P><STRONG><a name="[215]"></a>FindChildModelInCodeFirstMetadata</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, codefirst.o(i.FindChildModelInCodeFirstMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FindChildModelInCodeFirstMetadata &rArr; FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
</UL>

<P><STRONG><a name="[20e]"></a>FindDevice</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, codefirst.o(i.FindDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
</UL>

<P><STRONG><a name="[214]"></a>FindModelInCodeFirstMetadata</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, codefirst.o(i.FindModelInCodeFirstMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
</UL>

<P><STRONG><a name="[22b]"></a>FindReportedProperty</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, codefirst.o(i.FindReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = FindReportedProperty &rArr;  FindReportedProperty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
</UL>

<P><STRONG><a name="[221]"></a>FindValue</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, codefirst.o(i.FindValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = FindValue &rArr;  FindValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
</UL>

<P><STRONG><a name="[21f]"></a>SendAllDeviceProperties</STRONG> (Thumb, 162 bytes, Stack size 120 bytes, codefirst.o(i.SendAllDeviceProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SendAllDeviceProperties &rArr; Device_PublishTransacted &rArr; DataPublisher_PublishTransacted &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[22a]"></a>SendAllDeviceReportedProperties</STRONG> (Thumb, 162 bytes, Stack size 120 bytes, codefirst.o(i.SendAllDeviceReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SendAllDeviceReportedProperties &rArr; Device_PublishTransacted_ReportedProperty &rArr; DataPublisher_PublishTransacted_ReportedProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[3fd]"></a>buildModel</STRONG> (Thumb, 692 bytes, Stack size 64 bytes, codefirst.o(i.buildModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelProperty
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
</UL>

<P><STRONG><a name="[21b]"></a>buildModelTypes</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, codefirst.o(i.buildModelTypes))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = buildModelTypes &rArr; buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[21a]"></a>buildStructTypes</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, codefirst.o(i.buildStructTypes))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = buildStructTypes &rArr; Schema_AddStructTypeProperty &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[206]"></a>initializeDesiredProperties</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, codefirst.o(i.initializeDesiredProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = initializeDesiredProperties &rArr;  initializeDesiredProperties (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByIndex_Offset
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_offset
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyCount
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyByIndex
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[ab]"></a>NOPCloneFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jsondecoder.o(i.NOPCloneFunction))
<BR>[Address Reference Count : 1]<UL><LI> jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
</UL>
<P><STRONG><a name="[aa]"></a>NoFreeFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jsondecoder.o(i.NoFreeFunction))
<BR>[Address Reference Count : 1]<UL><LI> jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
</UL>
<P><STRONG><a name="[363]"></a>ParseArray</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, jsondecoder.o(i.ParseArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = ParseArray &rArr;  ParseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
</UL>

<P><STRONG><a name="[37f]"></a>ParseNameValuePair</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, jsondecoder.o(i.ParseNameValuePair))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseString
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
</UL>

<P><STRONG><a name="[381]"></a>ParseNumber</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, jsondecoder.o(i.ParseNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
</UL>

<P><STRONG><a name="[362]"></a>ParseObject</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, jsondecoder.o(i.ParseObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ParseObject &rArr; ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
</UL>

<P><STRONG><a name="[380]"></a>ParseString</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, jsondecoder.o(i.ParseString))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
</UL>

<P><STRONG><a name="[37e]"></a>ParseValue</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, jsondecoder.o(i.ParseValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseString
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[255]"></a>DestroyHalfBakedComplexType</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, agenttypesystem.o(i.DestroyHalfBakedComplexType))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DestroyHalfBakedComplexType &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
</UL>

<P><STRONG><a name="[9b]"></a>NoCloneFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, agenttypesystem.o(i.NoCloneFunction))
<BR>[Address Reference Count : 1]<UL><LI> agenttypesystem.o(i.AgentDataTypes_ToString)
</UL>
<P><STRONG><a name="[9a]"></a>NoFreeFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, agenttypesystem.o(i.NoFreeFunction))
<BR>[Address Reference Count : 1]<UL><LI> agenttypesystem.o(i.AgentDataTypes_ToString)
</UL>
<P><STRONG><a name="[240]"></a>ValidateDate</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, agenttypesystem.o(i.ValidateDate))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[244]"></a>ValidateDecimal</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, agenttypesystem.o(i.ValidateDecimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ValidateDecimal &rArr; scanOptionalNDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalNDigits
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatoryOneDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[1cf]"></a>__ARM_isinf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, agenttypesystem.o(i.__ARM_isinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isinf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[1ce]"></a>__ARM_isinff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, agenttypesystem.o(i.__ARM_isinff))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[1d6]"></a>base64b16</STRONG> (Thumb, 30 bytes, Stack size 28 bytes, agenttypesystem.o(i.base64b16))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = base64b16
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[1d7]"></a>base64b8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agenttypesystem.o(i.base64b8))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b8
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[1d5]"></a>base64char</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, agenttypesystem.o(i.base64char))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[739]"></a>base64toValue</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, agenttypesystem.o(i.base64toValue))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b8
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b16
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan4base64char
</UL>

<P><STRONG><a name="[241]"></a>fill_tm_yday_and_tm_wday</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, agenttypesystem.o(i.fill_tm_yday_and_tm_wday))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fill_tm_yday_and_tm_wday
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[1d4]"></a>hexDigitToChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, agenttypesystem.o(i.hexDigitToChar))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[248]"></a>scan4base64char</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, agenttypesystem.o(i.scan4base64char))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scan4base64char
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[23c]"></a>scanAndReadNDigitsInt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, agenttypesystem.o(i.scanAndReadNDigitsInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = scanAndReadNDigitsInt
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf3d2d
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[73a]"></a>scanMandatory1CapitalHexDigit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, agenttypesystem.o(i.scanMandatory1CapitalHexDigit))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatory2CapitalHexDigits
</UL>

<P><STRONG><a name="[247]"></a>scanMandatory2CapitalHexDigits</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, agenttypesystem.o(i.scanMandatory2CapitalHexDigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scanMandatory2CapitalHexDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatory1CapitalHexDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[3cd]"></a>scanMandatoryOneDigit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, agenttypesystem.o(i.scanMandatoryOneDigit))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
</UL>

<P><STRONG><a name="[23b]"></a>scanOptionalMinusSign</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, agenttypesystem.o(i.scanOptionalMinusSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scanOptionalMinusSign
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[3ce]"></a>scanOptionalNDigits</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, agenttypesystem.o(i.scanOptionalNDigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scanOptionalNDigits
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
</UL>

<P><STRONG><a name="[23f]"></a>sscanf3d2d</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanf3d2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sscanf3d2d &rArr; scanAndReadNDigitsInt
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAndReadNDigitsInt
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[239]"></a>sscanfd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sscanfd &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[23a]"></a>sscanfllu</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanfllu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sscanfllu &rArr; strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[9f]"></a>NoCloneFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datamarshaller.o(i.NoCloneFunction))
<BR>[Address Reference Count : 1]<UL><LI> datamarshaller.o(i.DataMarshaller_SendData)
</UL>
<P><STRONG><a name="[9e]"></a>NoFreeFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, datamarshaller.o(i.NoFreeFunction))
<BR>[Address Reference Count : 1]<UL><LI> datamarshaller.o(i.DataMarshaller_SendData)
</UL>
<P><STRONG><a name="[a4]"></a>DeviceInvokeAction</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, iotdevice.o(i.DeviceInvokeAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceInvokeAction
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotdevice.o(i.Device_Create)
</UL>
<P><STRONG><a name="[a3]"></a>DeviceInvokeMethod</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, iotdevice.o(i.DeviceInvokeMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceInvokeMethod
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotdevice.o(i.Device_Create)
</UL>
<P><STRONG><a name="[3fe]"></a>byteutil_readByte</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mqtt_client.o(i.byteutil_readByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = byteutil_readByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[3ff]"></a>byteutil_readUTF</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mqtt_client.o(i.byteutil_readUTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = byteutil_readUTF &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_read_uint16
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[400]"></a>byteutil_read_uint16</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqtt_client.o(i.byteutil_read_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = byteutil_read_uint16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
</UL>

<P><STRONG><a name="[404]"></a>clear_mqtt_options</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mqtt_client.o(i.clear_mqtt_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = clear_mqtt_options &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
</UL>

<P><STRONG><a name="[405]"></a>cloneMqttOptions</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, mqtt_client.o(i.cloneMqttOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cloneMqttOptions &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
</UL>

<P><STRONG><a name="[406]"></a>close_connection</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mqtt_client.o(i.close_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendComplete
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
</UL>

<P><STRONG><a name="[418]"></a>construct_trace_log_handle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqtt_client.o(i.construct_trace_log_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = construct_trace_log_handle &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[4c5]"></a>getLogTime</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqtt_client.o(i.getLogTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logOutgoingRawTrace
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logIncomingRawTrace
</UL>

<P><STRONG><a name="[512]"></a>logIncomingRawTrace</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, mqtt_client.o(i.logIncomingRawTrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = logIncomingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrievePacketType
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[514]"></a>logOutgoingRawTrace</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, mqtt_client.o(i.logOutgoingRawTrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = logOutgoingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrievePacketType
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
</UL>

<P><STRONG><a name="[515]"></a>log_incoming_trace</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, mqtt_client.o(i.log_incoming_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = log_incoming_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[516]"></a>log_outgoing_trace</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, mqtt_client.o(i.log_outgoing_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = log_outgoing_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
</UL>

<P><STRONG><a name="[e6]"></a>onBytesReceived</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mqtt_client.o(i.onBytesReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = onBytesReceived &rArr; mqtt_codec_bytesReceived &rArr; prepareheaderDataInfo &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_connect)
</UL>
<P><STRONG><a name="[e5]"></a>onIoError</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mqtt_client.o(i.onIoError))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = onIoError &rArr; set_error_callback &rArr; close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_connect)
</UL>
<P><STRONG><a name="[e7]"></a>onOpenComplete</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, mqtt_client.o(i.onOpenComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = onOpenComplete &rArr; mqtt_codec_connect &rArr; constructConnPayload &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_connect)
</UL>
<P><STRONG><a name="[b7]"></a>on_connection_closed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mqtt_client.o(i.on_connection_closed))
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.close_connection)
</UL>
<P><STRONG><a name="[e8]"></a>recvCompleteCallback</STRONG> (Thumb, 1850 bytes, Stack size 64 bytes, mqtt_client.o(i.recvCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = recvCompleteCallback &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logIncomingRawTrace
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_read_uint16
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readByte
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsRetained
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsDuplicateMsg
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishRelease
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishReceived
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishComplete
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishAck
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QOS_VALUEStrings
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_init)
</UL>
<P><STRONG><a name="[513]"></a>retrievePacketType</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, mqtt_client.o(i.retrievePacketType))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logOutgoingRawTrace
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logIncomingRawTrace
</UL>

<P><STRONG><a name="[10a]"></a>sendComplete</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, mqtt_client.o(i.sendComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendComplete &rArr; set_error_callback &rArr; close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.sendPacketItem)
</UL>
<P><STRONG><a name="[69c]"></a>sendPacketItem</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, mqtt_client.o(i.sendPacketItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sendPacketItem &rArr; logOutgoingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logOutgoingRawTrace
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
</UL>

<P><STRONG><a name="[69d]"></a>set_error_callback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mqtt_client.o(i.set_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_error_callback &rArr; close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendComplete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onIoError
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onBytesReceived
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
</UL>

<P><STRONG><a name="[3eb]"></a>addListItemsToSubscribePacket</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, mqtt_codec.o(i.addListItemsToSubscribePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
</UL>

<P><STRONG><a name="[3ed]"></a>addListItemsToUnsubscribePacket</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mqtt_codec.o(i.addListItemsToUnsubscribePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
</UL>

<P><STRONG><a name="[40d]"></a>completePacketData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqtt_codec.o(i.completePacketData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = completePacketData &rArr; BUFFER_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
</UL>

<P><STRONG><a name="[410]"></a>constructConnPayload</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, mqtt_codec.o(i.constructConnPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = constructConnPayload &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[411]"></a>constructConnectVariableHeader</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mqtt_codec.o(i.constructConnectVariableHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = constructConnectVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeByte
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[413]"></a>constructFixedHeader</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mqtt_codec.o(i.constructFixedHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = constructFixedHeader &rArr; BUFFER_prepend &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[414]"></a>constructPublishReply</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mqtt_codec.o(i.constructPublishReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishRelease
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishReceived
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishComplete
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishAck
</UL>

<P><STRONG><a name="[415]"></a>constructPublishVariableHeader</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, mqtt_codec.o(i.constructPublishVariableHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
</UL>

<P><STRONG><a name="[416]"></a>constructSubscibeTypeVariableHeader</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqtt_codec.o(i.constructSubscibeTypeVariableHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = constructSubscibeTypeVariableHeader &rArr; BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
</UL>

<P><STRONG><a name="[6ab]"></a>prepareheaderDataInfo</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, mqtt_codec.o(i.prepareheaderDataInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prepareheaderDataInfo &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
</UL>

<P><STRONG><a name="[41b]"></a>debug_print_pk</STRONG> (Thumb, 178 bytes, Stack size 112 bytes, debug.o(i.debug_print_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_debug
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[41d]"></a>debug_send_line</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(i.debug_send_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_send_line
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[49d]"></a>entropy_gather_internal</STRONG> (Thumb, 114 bytes, Stack size 152 bytes, entropy.o(i.entropy_gather_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
</UL>

<P><STRONG><a name="[49e]"></a>entropy_update</STRONG> (Thumb, 66 bytes, Stack size 88 bytes, entropy.o(i.entropy_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>

<P><STRONG><a name="[134]"></a>ecdsa_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>ecdsa_can_do</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk_wrap.o(i.ecdsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>ecdsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>ecdsa_sign_wrap</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, pk_wrap.o(i.ecdsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>ecdsa_verify_wrap</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pk_wrap.o(i.ecdsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>eckey_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>eckey_can_do</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>eckey_check_pair</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_check_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>eckey_debug</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_debug))
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>eckey_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>eckey_get_bitlen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_get_bitlen))
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>eckey_sign_wrap</STRONG> (Thumb, 76 bytes, Stack size 224 bytes, pk_wrap.o(i.eckey_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2576<LI>Call Chain = eckey_sign_wrap &rArr; ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign_det &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>eckey_verify_wrap</STRONG> (Thumb, 68 bytes, Stack size 208 bytes, pk_wrap.o(i.eckey_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = eckey_verify_wrap &rArr; ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>eckeydh_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.eckeydh_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>rsa_alloc_wrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>rsa_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_check_pair_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>rsa_debug</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsa_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, pk_wrap.o(i.rsa_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, pk_wrap.o(i.rsa_encrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>rsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>rsa_get_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_get_bitlen))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>rsa_sign_wrap</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, pk_wrap.o(i.rsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>rsa_verify_wrap</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, pk_wrap.o(i.rsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[5e0]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, oid.o(i.oid_sig_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>

<P><STRONG><a name="[675]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x509_crt.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>

<P><STRONG><a name="[683]"></a>x509_check_wildcard</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, x509_crt.o(i.x509_check_wildcard))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[687]"></a>x509_crt_check_parent</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, x509_crt.o(i.x509_crt_check_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[680]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 756 bytes, Stack size 88 bytes, x509_crt.o(i.x509_crt_parse_der_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[688]"></a>x509_crt_verify_child</STRONG> (Thumb, 480 bytes, Stack size 144 bytes, x509_crt.o(i.x509_crt_verify_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 3792 + In Cycle
<LI>Call Chain = x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[689]"></a>x509_crt_verify_top</STRONG> (Thumb, 458 bytes, Stack size 136 bytes, x509_crt.o(i.x509_crt_verify_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 3648<LI>Call Chain = x509_crt_verify_top &rArr; x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[7a3]"></a>x509_crt_verifycrl</STRONG> (Thumb, 246 bytes, Stack size 112 bytes, x509_crt.o(i.x509_crt_verifycrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 3512<LI>Call Chain = x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[7a4]"></a>x509_get_basic_constraints</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_basic_constraints))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7a1]"></a>x509_get_crt_ext</STRONG> (Thumb, 474 bytes, Stack size 80 bytes, x509_crt.o(i.x509_get_crt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7a6]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_subject_alt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_subject_alt_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7a0]"></a>x509_get_uid</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, x509_crt.o(i.x509_get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[67b]"></a>x509_info_cert_type</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, x509_crt.o(i.x509_info_cert_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_cert_type &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[67c]"></a>x509_info_key_usage</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, x509_crt.o(i.x509_info_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_key_usage &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[682]"></a>x509_memcasecmp</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, x509_crt.o(i.x509_memcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
</UL>

<P><STRONG><a name="[79f]"></a>x509_name_cmp</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, x509_crt.o(i.x509_name_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_name_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>

<P><STRONG><a name="[686]"></a>x509_profile_check_key</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, x509_crt.o(i.x509_profile_check_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = x509_profile_check_key
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[7a2]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[685]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[48a]"></a>add32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ecp_curves.o(i.add32))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[484]"></a>ecp_group_load</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ecp_curves.o(i.ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mpi_load
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[487]"></a>ecp_mod_koblitz</STRONG> (Thumb, 330 bytes, Stack size 104 bytes, ecp_curves.o(i.ecp_mod_koblitz))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256k1
</UL>

<P><STRONG><a name="[d3]"></a>ecp_mod_p256</STRONG> (Thumb, 1072 bytes, Stack size 80 bytes, ecp_curves.o(i.ecp_mod_p256))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ecp_mod_p256 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[d5]"></a>ecp_mod_p256k1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ecp_curves.o(i.ecp_mod_p256k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ecp_mod_p256k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[d4]"></a>ecp_mod_p384</STRONG> (Thumb, 1376 bytes, Stack size 104 bytes, ecp_curves.o(i.ecp_mod_p384))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p384 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[485]"></a>ecp_mpi_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves.o(i.ecp_mpi_load))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>

<P><STRONG><a name="[48c]"></a>fix_negative</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ecp_curves.o(i.fix_negative))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[48b]"></a>sub32</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ecp_curves.o(i.sub32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub32
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[5d2]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[5d0]"></a>mpi_montmul</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[5d1]"></a>mpi_montred</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[5d5]"></a>mpi_mul_hlp</STRONG> (Thumb, 898 bytes, Stack size 20 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[5d6]"></a>mpi_sub_hlp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[66a]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x509_crl.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_free
</UL>

<P><STRONG><a name="[7a5]"></a>x509_get_crl_entry_ext</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, x509_crl.o(i.x509_get_crl_entry_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_crl_entry_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_entries
</UL>

<P><STRONG><a name="[672]"></a>x509_get_entries</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, x509_crl.o(i.x509_get_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = x509_get_entries &rArr; mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_parse_int
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crl_entry_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_parse_der
</UL>

<P><STRONG><a name="[3fc]"></a>block_cipher_df</STRONG> (Thumb, 284 bytes, Stack size 848 bytes, ctr_drbg.o(i.block_cipher_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[419]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, ctr_drbg.o(i.ctr_drbg_update_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[63d]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_cipher_get_cipher_mode))
<BR><BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[667]"></a>mbedtls_ssl_own_cert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_own_cert))
<BR><BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
</UL>

<P><STRONG><a name="[657]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[633]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[630]"></a>ssl_append_key_cert</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_append_key_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_append_key_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
</UL>

<P><STRONG><a name="[df]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 194 bytes, Stack size 184 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[e2]"></a>ssl_calc_finished_tls_sha384</STRONG> (Thumb, 190 bytes, Stack size 304 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = ssl_calc_finished_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[de]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 104 bytes, Stack size 136 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[e1]"></a>ssl_calc_verify_tls_sha384</STRONG> (Thumb, 104 bytes, Stack size 248 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = ssl_calc_verify_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[659]"></a>ssl_check_ctr_renegotiate</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_check_ctr_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4024<LI>Call Chain = ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[74b]"></a>ssl_decrypt_buf</STRONG> (Thumb, 1734 bytes, Stack size 96 bytes, ssl_tls.o(i.ssl_decrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_process
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[669]"></a>ssl_encrypt_buf</STRONG> (Thumb, 894 bytes, Stack size 112 bytes, ssl_tls.o(i.ssl_encrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[663]"></a>ssl_handshake_init</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_handshake_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>

<P><STRONG><a name="[652]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_handshake_wrapup_free_hs_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[65e]"></a>ssl_parse_record_header</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ssl_tls.o(i.ssl_parse_record_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[65f]"></a>ssl_prepare_record_content</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_prepare_record_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[662]"></a>ssl_session_copy</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_session_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_session_copy &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
</UL>

<P><STRONG><a name="[65a]"></a>ssl_set_timer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[65b]"></a>ssl_start_renegotiation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_start_renegotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 3984<LI>Call Chain = ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[e3]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_checksum_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[e4]"></a>ssl_update_checksum_sha384</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_checksum_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ssl_update_checksum_sha384 &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[10f]"></a>ssl_update_checksum_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.ssl_handshake_init)
</UL>
<P><STRONG><a name="[666]"></a>ssl_write_real</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_write_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[796]"></a>tls_prf_generic</STRONG> (Thumb, 274 bytes, Stack size 256 bytes, ssl_tls.o(i.tls_prf_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha384
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[dd]"></a>tls_prf_sha256</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, ssl_tls.o(i.tls_prf_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[e0]"></a>tls_prf_sha384</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, ssl_tls.o(i.tls_prf_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tls_prf_sha384 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[472]"></a>ecp_add_mixed</STRONG> (Thumb, 948 bytes, Stack size 120 bytes, ecp.o(i.ecp_add_mixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[47f]"></a>ecp_check_pubkey_sw</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, ecp.o(i.ecp_check_pubkey_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[481]"></a>ecp_comb_fixed</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ecp.o(i.ecp_comb_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecp_comb_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[47a]"></a>ecp_double_jac</STRONG> (Thumb, 1062 bytes, Stack size 80 bytes, ecp.o(i.ecp_double_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[5a0]"></a>ecp_get_type</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ecp.o(i.ecp_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
</UL>

<P><STRONG><a name="[477]"></a>ecp_modp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ecp.o(i.ecp_modp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[48e]"></a>ecp_mul_comb</STRONG> (Thumb, 400 bytes, Stack size 360 bytes, ecp.o(i.ecp_mul_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[491]"></a>ecp_mul_comb_core</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, ecp.o(i.ecp_mul_comb_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[493]"></a>ecp_normalize_jac</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, ecp.o(i.ecp_normalize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[49a]"></a>ecp_normalize_jac_many</STRONG> (Thumb, 550 bytes, Stack size 96 bytes, ecp.o(i.ecp_normalize_jac_many))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
</UL>

<P><STRONG><a name="[48f]"></a>ecp_precompute_comb</STRONG> (Thumb, 216 bytes, Stack size 176 bytes, ecp.o(i.ecp_precompute_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[498]"></a>ecp_randomize_jac</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, ecp.o(i.ecp_randomize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[492]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ecp.o(i.ecp_safe_invert_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[496]"></a>ecp_select_comb</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ecp.o(i.ecp_select_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[5a4]"></a>mbedtls_ecp_mul_shortcuts</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_mul_shortcuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[13c]"></a>sha1_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>sha1_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>sha1_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>sha1_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>sha1_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>sha1_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha1_starts_wrap &rArr; mbedtls_sha1_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>sha1_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>sha224_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>sha224_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>sha224_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>sha224_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>sha224_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>sha224_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sha224_starts_wrap &rArr; mbedtls_sha256_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>sha224_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>sha224_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>sha256_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sha256_starts_wrap &rArr; mbedtls_sha256_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>sha256_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>sha384_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_clone_wrap &rArr; mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>sha384_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>sha384_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>sha384_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = sha384_finish_wrap &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>sha384_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = sha384_process_wrap &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>sha384_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha384_starts_wrap &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>sha384_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = sha384_update_wrap &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>sha384_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = sha384_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>sha512_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha512_starts_wrap &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>sha512_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = sha512_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[75b]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_cli.o(i.mbedtls_ssl_own_key))
<BR><BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[750]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_cli.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[749]"></a>ssl_check_server_ecdh_params</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_check_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[74d]"></a>ssl_generate_random</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_generate_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_generate_random &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[74e]"></a>ssl_parse_alpn_ext</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_alpn_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = ssl_parse_alpn_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[647]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, ssl_cli.o(i.ssl_parse_certificate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[64e]"></a>ssl_parse_new_session_ticket</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_parse_new_session_ticket))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ssl_parse_new_session_ticket &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[74f]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_renegotiation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[751]"></a>ssl_parse_server_ecdh_params</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[644]"></a>ssl_parse_server_hello</STRONG> (Thumb, 2230 bytes, Stack size 64 bytes, ssl_cli.o(i.ssl_parse_server_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[648]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_server_hello_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ssl_parse_server_hello_done &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[646]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 798 bytes, Stack size 152 bytes, ssl_cli.o(i.ssl_parse_server_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = ssl_parse_server_key_exchange &rArr; ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[755]"></a>ssl_parse_signature_algorithm</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_signature_algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_parse_signature_algorithm &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[754]"></a>ssl_parse_supported_point_formats_ext</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ssl_parse_supported_point_formats_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[75a]"></a>ssl_write_alpn_ext</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_alpn_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_alpn_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[64b]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 416 bytes, Stack size 104 bytes, ssl_cli.o(i.ssl_write_certificate_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[643]"></a>ssl_write_client_hello</STRONG> (Thumb, 846 bytes, Stack size 56 bytes, ssl_cli.o(i.ssl_write_client_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_truncated_hmac_ext
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[64a]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_write_client_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[765]"></a>ssl_write_encrypted_pms</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, ssl_cli.o(i.ssl_write_encrypted_pms))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ssl_write_encrypted_pms &rArr; mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_encrypt
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[763]"></a>ssl_write_extended_ms_ext</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_extended_ms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_write_extended_ms_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[75c]"></a>ssl_write_hostname_ext</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_hostname_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_hostname_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[761]"></a>ssl_write_max_fragment_length_ext</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_max_fragment_length_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_write_max_fragment_length_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[75d]"></a>ssl_write_renegotiation_ext</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_renegotiation_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_write_renegotiation_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[764]"></a>ssl_write_session_ticket_ext</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_session_ticket_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_session_ticket_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[75e]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_signature_algorithms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_signature_algorithms_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[75f]"></a>ssl_write_supported_elliptic_curves_ext</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_supported_elliptic_curves_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_supported_elliptic_curves_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[760]"></a>ssl_write_supported_point_formats_ext</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_write_supported_point_formats_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[762]"></a>ssl_write_truncated_hmac_ext</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_truncated_hmac_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_write_truncated_hmac_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[4c1]"></a>gcm_gen_table</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, gcm.o(i.gcm_gen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = gcm_gen_table &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[5af]"></a>gcm_mult</STRONG> (Thumb, 328 bytes, Stack size 52 bytes, gcm.o(i.gcm_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[5ac]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gcm.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
</UL>

<P><STRONG><a name="[5f4]"></a>pk_get_ecpubkey</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_ecpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[5f1]"></a>pk_get_pk_alg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[5f2]"></a>pk_get_rsapubkey</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, pkparse.o(i.pk_get_rsapubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[5ec]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, pkparse.o(i.pk_parse_key_pkcs1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[5ef]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, pkparse.o(i.pk_parse_key_pkcs8_unencrypted_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[5ed]"></a>pk_parse_key_sec1_der</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, pkparse.o(i.pk_parse_key_sec1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[5f3]"></a>pk_use_ecparams</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pkparse.o(i.pk_use_ecparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pk_use_ecparams &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[cb]"></a>add_one_and_zeros_padding</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cipher.o(i.add_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[c9]"></a>add_pkcs_padding</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cipher.o(i.add_pkcs_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[cd]"></a>add_zeros_and_len_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cipher.o(i.add_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[cf]"></a>add_zeros_padding</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(i.add_zeros_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[d1]"></a>get_no_padding</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(i.get_no_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[cc]"></a>get_one_and_zeros_padding</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, cipher.o(i.get_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[ca]"></a>get_pkcs_padding</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, cipher.o(i.get_pkcs_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[ce]"></a>get_zeros_and_len_padding</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cipher.o(i.get_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[d0]"></a>get_zeros_padding</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, cipher.o(i.get_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[578]"></a>mbedtls_cipher_get_block_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_get_block_size))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>

<P><STRONG><a name="[693]"></a>x509_check_time</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, x509.o(i.x509_check_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = x509_check_time
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>

<P><STRONG><a name="[7a8]"></a>x509_date_is_valid</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, x509.o(i.x509_date_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[68b]"></a>x509_get_attr_type_value</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, x509.o(i.x509_get_attr_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[692]"></a>x509_get_current_time</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, x509.o(i.x509_get_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>

<P><STRONG><a name="[68d]"></a>x509_get_hash_alg</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, x509.o(i.x509_get_hash_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_hash_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[7a7]"></a>x509_parse_int</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, x509.o(i.x509_parse_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[68f]"></a>x509_parse_time</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, x509.o(i.x509_parse_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_parse_time &rArr; x509_parse_int
</UL>
<BR>[Calls]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[565]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, asn1parse.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[421]"></a>derive_mpi</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ecdsa.o(i.derive_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = derive_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign_det
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[469]"></a>ecdsa_signature_to_asn1</STRONG> (Thumb, 98 bytes, Stack size 168 bytes, ecdsa.o(i.ecdsa_signature_to_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ecdsa_signature_to_asn1 &rArr; mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[5cc]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, md.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[5e6]"></a>mbedtls_pk_get_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[5f6]"></a>pk_hashlen_helper</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(i.pk_hashlen_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
</UL>

<P><STRONG><a name="[612]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rsa.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[611]"></a>mgf_mask</STRONG> (Thumb, 136 bytes, Stack size 104 bytes, rsa.o(i.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mgf_mask &rArr; mbedtls_md_update
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[60d]"></a>rsa_prepare_blinding</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, rsa.o(i.rsa_prepare_blinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[153]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, cipher_wrap.o(i.aes_crypt_cbc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>aes_ctx_alloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>aes_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cipher_wrap.o(i.gcm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>gcm_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gcm_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>gcm_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6e9]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageWaiting
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[702]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[39d]"></a>SHA384_512Finalize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sha384-512.o(i.SHA384_512Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>

<P><STRONG><a name="[39e]"></a>SHA384_512PadMessage</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, sha384-512.o(i.SHA384_512PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Finalize
</UL>

<P><STRONG><a name="[39f]"></a>SHA384_512ProcessMessageBlock</STRONG> (Thumb, 910 bytes, Stack size 832 bytes, sha384-512.o(i.SHA384_512ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512PadMessage
</UL>

<P><STRONG><a name="[39a]"></a>SHA384_512Reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sha384-512.o(i.SHA384_512Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Reset
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Reset
</UL>

<P><STRONG><a name="[39c]"></a>SHA384_512ResultN</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sha384-512.o(i.SHA384_512ResultN))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Finalize
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Result
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Result
</UL>

<P><STRONG><a name="[11d]"></a>xio_CloneOption</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, xio.o(i.xio_CloneOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xio_CloneOption &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xio.o(i.xio_retrieveoptions)
</UL>
<P><STRONG><a name="[11c]"></a>xio_DestroyOption</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, xio.o(i.xio_DestroyOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xio_DestroyOption &rArr; OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xio.o(i.xio_retrieveoptions)
</UL>
<P><STRONG><a name="[392]"></a>SHA224_256Finalize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sha224.o(i.SHA224_256Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>

<P><STRONG><a name="[393]"></a>SHA224_256PadMessage</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, sha224.o(i.SHA224_256PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Finalize
</UL>

<P><STRONG><a name="[394]"></a>SHA224_256ProcessMessageBlock</STRONG> (Thumb, 338 bytes, Stack size 340 bytes, sha224.o(i.SHA224_256ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256PadMessage
</UL>

<P><STRONG><a name="[38f]"></a>SHA224_256Reset</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sha224.o(i.SHA224_256Reset))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Reset
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Reset
</UL>

<P><STRONG><a name="[391]"></a>SHA224_256ResultN</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sha224.o(i.SHA224_256ResultN))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Result
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Result
</UL>

<P><STRONG><a name="[1e3]"></a>BUFFER_safemalloc</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_safemalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BUFFER_safemalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
</UL>

<P><STRONG><a name="[385]"></a>construct_sas_token</STRONG> (Thumb, 452 bytes, Stack size 104 bytes, sastoken.o(i.construct_sas_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_tToString
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encoder
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_CreateString
</UL>

<P><STRONG><a name="[1fd]"></a>CONSTBUFFER_Create_Internal</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, constbuffer.o(i.CONSTBUFFER_Create_Internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CONSTBUFFER_Create_Internal &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create
</UL>

<P><STRONG><a name="[1c8]"></a>AddOptionInternal</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, optionhandler.o(i.AddOptionInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_AddOption
</UL>

<P><STRONG><a name="[24b]"></a>CreateInternal</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, optionhandler.o(i.CreateInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CreateInternal &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
</UL>

<P><STRONG><a name="[28d]"></a>DestroyInternal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, optionhandler.o(i.DestroyInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DestroyInternal &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
</UL>

<P><STRONG><a name="[3c7]"></a>URL_PrintableChar</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, urlencode.o(i.URL_PrintableChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URL_PrintableChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
</UL>

<P><STRONG><a name="[371]"></a>Map_CloneVector</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, map.o(i.Map_CloneVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
</UL>

<P><STRONG><a name="[372]"></a>Map_DecreaseStorageKeysValues</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, map.o(i.Map_DecreaseStorageKeysValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Map_DecreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
</UL>

<P><STRONG><a name="[374]"></a>Map_IncreaseStorageKeysValues</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, map.o(i.Map_IncreaseStorageKeysValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
</UL>

<P><STRONG><a name="[36f]"></a>findKey</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, map.o(i.findKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = findKey &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
</UL>

<P><STRONG><a name="[370]"></a>insertNewKeyValue</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, map.o(i.insertNewKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
</UL>

<P><STRONG><a name="[42a]"></a>dhcp_bind</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[42d]"></a>dhcp_check</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[433]"></a>dhcp_create_msg</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[438]"></a>dhcp_dec_pcb_refcount</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_dec_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[429]"></a>dhcp_decline</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[43e]"></a>dhcp_delete_msg</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[430]"></a>dhcp_discover</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[442]"></a>dhcp_handle_ack</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[444]"></a>dhcp_inc_pcb_refcount</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_inc_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[436]"></a>dhcp_option</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[437]"></a>dhcp_option_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_byte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[43a]"></a>dhcp_option_long</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dhcp_option_long &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[440]"></a>dhcp_option_short</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_short &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[43b]"></a>dhcp_option_trailer</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_trailer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[449]"></a>dhcp_parse_reply</STRONG> (Thumb, 698 bytes, Stack size 56 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[431]"></a>dhcp_rebind</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[44c]"></a>dhcp_reboot</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[b9]"></a>dhcp_recv</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_inc_pcb_refcount)
</UL>
<P><STRONG><a name="[44d]"></a>dhcp_select</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[42b]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[441]"></a>dhcp_timeout</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[4d2]"></a>icmp_send_response</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[4a5]"></a>etharp_find_entry</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[4a6]"></a>etharp_free_entry</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[4ab]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[4a9]"></a>etharp_raw</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>

<P><STRONG><a name="[4ae]"></a>etharp_request_dst</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, etharp.o(i.etharp_request_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[4a8]"></a>etharp_update_arp_entry</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[4ee]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ip4_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[4f6]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, ip4_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[4f7]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[4f9]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ip4_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[4f5]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ip4_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[c2]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ip4_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip4_frag.o(i.ip4_frag)
</UL>
<P><STRONG><a name="[3ef]"></a>add_pending_io</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, az_socketio_mbed.o(i.add_pending_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = add_pending_io &rArr; singlylinkedlist_add &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_add
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_send
</UL>

<P><STRONG><a name="[744]"></a>indicate_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, az_socketio_mbed.o(i.indicate_error))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[10e]"></a>socketio_CloneOption</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, az_socketio_mbed.o(i.socketio_CloneOption))
<BR>[Address Reference Count : 1]<UL><LI> az_socketio_mbed.o(i.socketio_retrieveoptions)
</UL>
<P><STRONG><a name="[10d]"></a>socketio_DestroyOption</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, az_socketio_mbed.o(i.socketio_DestroyOption))
<BR>[Address Reference Count : 1]<UL><LI> az_socketio_mbed.o(i.socketio_retrieveoptions)
</UL>
<P><STRONG><a name="[15b]"></a>socketio_retrieveoptions</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, az_socketio_mbed.o(i.socketio_retrieveoptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = socketio_retrieveoptions &rArr; OptionHandler_Create &rArr; CreateInternal &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn &rArr; Create_EDM_BOOLEAN_from_int
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_EDM_BOOLEAN_from_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_thumidity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_thumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_thumidity &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac &rArr; Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tpressure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tpressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tpressure &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_ttemperature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_ttemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_ttemperature &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts</STRONG> (Thumb, 34 bytes, Stack size 72 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts &rArr; Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>DesiredPropertyDeinitialize_SerializableIotSampleDev_tDesiredTelemetryInterval</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, azurexcubesample.o(i.DesiredPropertyDeinitialize_SerializableIotSampleDev_tDesiredTelemetryInterval))
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>DesiredPropertyInitialize_SerializableIotSampleDev_tDesiredTelemetryInterval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, azurexcubesample.o(i.DesiredPropertyInitialize_SerializableIotSampleDev_tDesiredTelemetryInterval))
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>DeviceMethodCallback</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, azurexcubesample.o(i.DeviceMethodCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = DeviceMethodCallback &rArr; CodeFirst_ExecuteMethod &rArr; Device_ExecuteMethod &rArr; CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_GetReturn
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Destroy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.iothub_client_XCube_sample_run)
</UL>
<P><STRONG><a name="[c0]"></a>DeviceTwinCallback</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, azurexcubesample.o(i.DeviceTwinCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = DeviceTwinCallback &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.iothub_client_XCube_sample_run)
</UL>
<P><STRONG><a name="[2b0]"></a>FromAGENT_DATA_TYPE_ascii_char_ptr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, azurexcubesample.o(i.FromAGENT_DATA_TYPE_ascii_char_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FromAGENT_DATA_TYPE_ascii_char_ptr &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelloWRAPPER
</UL>

<P><STRONG><a name="[177]"></a>FromAGENT_DATA_TYPE_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, azurexcubesample.o(i.FromAGENT_DATA_TYPE_int))
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>HelloWRAPPER</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, azurexcubesample.o(i.HelloWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HelloWRAPPER &rArr; Hello &rArr; MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hello
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromAGENT_DATA_TYPE_ascii_char_ptr
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>LedToggleWRAPPER</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.LedToggleWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = LedToggleWRAPPER &rArr; LedToggle &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>MessageCallback</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, azurexcubesample.o(i.MessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = MessageCallback &rArr; CodeFirst_ExecuteCommand &rArr; Device_ExecuteCommand &rArr; CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.iothub_client_XCube_sample_run)
</UL>
<P><STRONG><a name="[172]"></a>RebootWRAPPER</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, azurexcubesample.o(i.RebootWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = RebootWRAPPER &rArr; Reboot &rArr; MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>SendConfirmationCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, azurexcubesample.o(i.SendConfirmationCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SendConfirmationCallback &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_CONFIRMATION_RESULTStrings
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.iothub_client_XCube_sample_run)
</UL>
<P><STRONG><a name="[1ef]"></a>Base64_Encode_Internal</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, azure_base64.o(i.Base64_Encode_Internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64char
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encoder
</UL>

<P><STRONG><a name="[1ee]"></a>Base64decode</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, azure_base64.o(i.Base64decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Base64decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
</UL>

<P><STRONG><a name="[1f0]"></a>base64char</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, azure_base64.o(i.base64char))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>

<P><STRONG><a name="[1f5]"></a>base64toValue</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, azure_base64.o(i.base64toValue))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode
</UL>

<P><STRONG><a name="[387]"></a>SHA1Finalize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, azure_sha1.o(i.SHA1Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SHA1Finalize &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
</UL>

<P><STRONG><a name="[388]"></a>SHA1PadMessage</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, azure_sha1.o(i.SHA1PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Finalize
</UL>

<P><STRONG><a name="[38a]"></a>SHA1ProcessMessageBlock</STRONG> (Thumb, 368 bytes, Stack size 376 bytes, azure_sha1.o(i.SHA1ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
</UL>

<P><STRONG><a name="[6e5]"></a>indicate_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, az_tlsio_mbedtls.o(i.indicate_error))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_send
</UL>

<P><STRONG><a name="[6e6]"></a>indicate_open_complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, az_tlsio_mbedtls.o(i.indicate_open_complete))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
</UL>

<P><STRONG><a name="[5bd]"></a>mbedtls_init</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, az_tlsio_mbedtls.o(i.mbedtls_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1476<LI>Call Chain = mbedtls_init &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_set_threshold
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_min_version
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
</UL>

<P><STRONG><a name="[da]"></a>on_io_recv</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, az_tlsio_mbedtls.o(i.on_io_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_io_recv &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[db]"></a>on_io_send</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, az_tlsio_mbedtls.o(i.on_io_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_io_send &rArr; xio_send
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_send
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[115]"></a>on_underlying_io_bytes_received</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, az_tlsio_mbedtls.o(i.on_underlying_io_bytes_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_underlying_io_bytes_received &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.tlsio_mbedtls_open)
</UL>
<P><STRONG><a name="[113]"></a>on_underlying_io_close_complete_during_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, az_tlsio_mbedtls.o(i.on_underlying_io_close_complete_during_close))
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.tlsio_mbedtls_close)
</UL>
<P><STRONG><a name="[114]"></a>on_underlying_io_error</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, az_tlsio_mbedtls.o(i.on_underlying_io_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_underlying_io_error &rArr; xio_close
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.tlsio_mbedtls_open)
</UL>
<P><STRONG><a name="[116]"></a>on_underlying_io_open_complete</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, az_tlsio_mbedtls.o(i.on_underlying_io_open_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 3984<LI>Call Chain = on_underlying_io_open_complete &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.tlsio_mbedtls_open)
</UL>
<P><STRONG><a name="[d7]"></a>tlsio_entropy_poll</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, az_tlsio_mbedtls.o(i.tlsio_entropy_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tlsio_entropy_poll &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[119]"></a>tlsio_mbedtls_CloneOption</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_CloneOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tlsio_mbedtls_CloneOption &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
</UL>
<P><STRONG><a name="[118]"></a>tlsio_mbedtls_DestroyOption</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, az_tlsio_mbedtls.o(i.tlsio_mbedtls_DestroyOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tlsio_mbedtls_DestroyOption &rArr; OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> az_tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
</UL>
<P><STRONG><a name="[775]"></a>tcp_close_shutdown</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
</UL>

<P><STRONG><a name="[778]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcp.o(i.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[772]"></a>tcp_kill_state</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[779]"></a>tcp_listen_closed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_listen_closed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[78a]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(i.tcp_netif_ip_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[773]"></a>tcp_new_port</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[b8]"></a>cyclic_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timeouts.o(i.cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cyclic_timer &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.cyclic_timer)
<LI> timeouts.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[769]"></a>sys_check_timeouts</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, timeouts.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[111]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timeouts.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[695]"></a>plug_holes</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[78c]"></a>tcp_getoptbyte</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_getoptbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[786]"></a>tcp_input_delayed_close</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_input_delayed_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[783]"></a>tcp_listen_input</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[789]"></a>tcp_parseopt</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_parseopt &rArr; tcp_getoptbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[785]"></a>tcp_process</STRONG> (Thumb, 934 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[78f]"></a>tcp_receive</STRONG> (Thumb, 1510 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[782]"></a>tcp_timewait_input</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[6de]"></a>netif_issue_reports</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(i.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[454]"></a>dns_alloc_pcb</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, dns.o(i.dns_alloc_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dns_alloc_pcb &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[456]"></a>dns_call_found</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, dns.o(i.dns_call_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[457]"></a>dns_check_entry</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[459]"></a>dns_compare_name</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dns_compare_name &rArr; pbuf_try_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[45b]"></a>dns_enqueue</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, dns.o(i.dns_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[ba]"></a>dns_recv</STRONG> (Thumb, 474 bytes, Stack size 72 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dns_recv &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_alloc_pcb)
</UL>
<P><STRONG><a name="[458]"></a>dns_send</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[77e]"></a>tcp_create_segment</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[788]"></a>tcp_output_alloc_header</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[78b]"></a>tcp_output_segment</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[78d]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[795]"></a>tcp_write_checks</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_write_checks &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[464]"></a>do_memp_free_pool</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, memp.o(i.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = do_memp_free_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[465]"></a>do_memp_malloc_pool</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, memp.o(i.do_memp_malloc_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = do_memp_malloc_pool &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[713]"></a>pbuf_header_impl</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>

<P><STRONG><a name="[715]"></a>pbuf_skip_const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_skip_const))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>

<P><STRONG><a name="[298]"></a>DisconnectFromClient</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iothubtransport_mqtt_common.o(i.DisconnectFromClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DisconnectFromClient &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_error_callback
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[2b1]"></a>GetTransportProviderIfNecessary</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.GetTransportProviderIfNecessary))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetTransportProviderIfNecessary &rArr; set_saved_tls_options &rArr; OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_xio_Certificate
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[2f7]"></a>InitializeConnection</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.InitializeConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = InitializeConnection &rArr; SendMqttConnectMsg &rArr; IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ConnectionStatusCallBack
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[2fb]"></a>InitializeTransportHandleData</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.InitializeTransportHandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = InitializeTransportHandleData &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
</UL>

<P><STRONG><a name="[357]"></a>RetrieveMessagePayload</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.RetrieveMessagePayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RetrieveMessagePayload &rArr; IoTHubMessage_GetByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetString
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentType
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[2f9]"></a>SendMqttConnectMsg</STRONG> (Thumb, 462 bytes, Stack size 64 bytes, iothubtransport_mqtt_common.o(i.SendMqttConnectMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = SendMqttConnectMsg &rArr; IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_GetOption
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ConnectionStatusCallBack
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[355]"></a>SubscribeToMqttProtocol</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, iothubtransport_mqtt_common.o(i.SubscribeToMqttProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = SubscribeToMqttProtocol &rArr; mqtt_client_subscribe &rArr; mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[3ee]"></a>addPropertiesTouMqttMessage</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.addPropertiesTouMqttMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = addPropertiesTouMqttMessage &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetMessageId
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetDiagnosticPropertyData
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetCorrelationId
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentTypeSystemProperty
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentEncodingSystemProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
</UL>

<P><STRONG><a name="[4b8]"></a>extractMqttProperties</STRONG> (Thumb, 654 bytes, Stack size 96 bytes, iothubtransport_mqtt_common.o(i.extractMqttProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = extractMqttProperties &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[35d]"></a>free_proxy_data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.free_proxy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = free_proxy_data &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
</UL>

<P><STRONG><a name="[305]"></a>free_transport_handle_data</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, iothubtransport_mqtt_common.o(i.free_transport_handle_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = free_transport_handle_data &rArr; set_saved_tls_options &rArr; OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_destroy
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_proxy_data
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[359]"></a>get_next_packet_id</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.get_next_packet_id))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
</UL>

<P><STRONG><a name="[a5]"></a>mqtt_error_callback</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.mqtt_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mqtt_error_callback &rArr; DisconnectFromClient &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ConnectionStatusCallBack
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_CLIENT_EVENT_ERRORStrings
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
</UL>
<P><STRONG><a name="[a7]"></a>mqtt_notification_callback</STRONG> (Thumb, 572 bytes, Stack size 64 bytes, iothubtransport_mqtt_common.o(i.mqtt_notification_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mqtt_notification_callback &rArr; extractMqttProperties &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getTopicName
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getApplicationMsg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_RetrievePropertyComplete
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ReportedStateComplete
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_MessageCallback
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DeviceMethodComplete
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_topic_type
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
</UL>
<P><STRONG><a name="[a6]"></a>mqtt_operation_complete_callback</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.mqtt_operation_complete_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mqtt_operation_complete_callback &rArr; sendMsgComplete &rArr; IoTHubClient_LL_SendComplete &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_reset
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ConnectionStatusCallBack
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_mqtt_return_codes
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
</UL>
<P><STRONG><a name="[6b4]"></a>parse_device_twin_topic_info</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.parse_device_twin_topic_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = parse_device_twin_topic_info &rArr; STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[354]"></a>publish_device_method_message</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.publish_device_method_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = publish_device_method_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
</UL>

<P><STRONG><a name="[356]"></a>publish_device_twin_get_message</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.publish_device_twin_get_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = publish_device_twin_get_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[35b]"></a>publish_device_twin_message</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.publish_device_twin_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = publish_device_twin_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_GetContent
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
</UL>

<P><STRONG><a name="[358]"></a>publish_mqtt_telemetry_msg</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.publish_mqtt_telemetry_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = publish_mqtt_telemetry_msg &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[6b5]"></a>retrieve_device_method_rid_info</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, iothubtransport_mqtt_common.o(i.retrieve_device_method_rid_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = retrieve_device_method_rid_info &rArr; STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[6b7]"></a>retrieve_mqtt_return_codes</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.retrieve_mqtt_return_codes))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
</UL>

<P><STRONG><a name="[6b3]"></a>retrieve_topic_type</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.retrieve_topic_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = retrieve_topic_type
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[352]"></a>sendMsgComplete</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.sendMsgComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = sendMsgComplete &rArr; IoTHubClient_LL_SendComplete &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
</UL>

<P><STRONG><a name="[4b9]"></a>setMqttMessagePropertyIfPossible</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.setMqttMessagePropertyIfPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = setMqttMessagePropertyIfPossible &rArr; IoTHubMessage_SetContentTypeSystemProperty &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentTypeSystemProperty
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentEncodingSystemProperty
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[29a]"></a>set_saved_tls_options</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.set_saved_tls_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_saved_tls_options &rArr; OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>

<P><STRONG><a name="[30b]"></a>get_seconds_since_epoch</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iothub_client_authorization.o(i.get_seconds_since_epoch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_seconds_since_epoch &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
</UL>

<P><STRONG><a name="[71d]"></a>get_base36_char</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iothub_client_diagnostic.o(i.get_base36_char))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
</UL>

<P><STRONG><a name="[4c9]"></a>get_epoch_time</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, iothub_client_diagnostic.o(i.get_epoch_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_epoch_time &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
</UL>

<P><STRONG><a name="[311]"></a>prepare_message_diagnostic_data</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, iothub_client_diagnostic.o(i.prepare_message_diagnostic_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prepare_message_diagnostic_data &rArr; get_epoch_time &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_epoch_time
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_base36_char
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
</UL>

<P><STRONG><a name="[310]"></a>should_add_diagnostic_info</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, iothub_client_diagnostic.o(i.should_add_diagnostic_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = should_add_diagnostic_info &rArr; __hardfp_floor
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
</UL>

<P><STRONG><a name="[29d]"></a>DoTimeouts</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, iothub_client_ll.o(i.DoTimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DoTimeouts &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
</UL>

<P><STRONG><a name="[326]"></a>attach_ms_timesOutAfter</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, iothub_client_ll.o(i.attach_ms_timesOutAfter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attach_ms_timesOutAfter &rArr; tickcounter_get_current_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
</UL>

<P><STRONG><a name="[328]"></a>dev_twin_data_create</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, iothub_client_ll.o(i.dev_twin_data_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dev_twin_data_create &rArr; CONSTBUFFER_Create &rArr; CONSTBUFFER_Create_Internal &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Destroy
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
</UL>

<P><STRONG><a name="[31a]"></a>device_twin_data_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iothub_client_ll.o(i.device_twin_data_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = device_twin_data_destroy &rArr; CONSTBUFFER_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ReportedStateComplete
</UL>

<P><STRONG><a name="[317]"></a>initialize_iothub_client</STRONG> (Thumb, 924 bytes, Stack size 88 bytes, iothub_client_ll.o(i.initialize_iothub_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTransportProtocol
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_CreateFromDeviceAuth
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetRetryPolicy
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[32d]"></a>make_product_info</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iothub_client_ll.o(i.make_product_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_platform_info
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[4d9]"></a>setTransportProtocol</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, iothub_client_ll.o(i.setTransportProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[402]"></a>calculate_next_wait_time</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, iothub_client_retry_control.o(i.calculate_next_wait_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = calculate_next_wait_time &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
</UL>

<P><STRONG><a name="[4b6]"></a>evaluate_retry_action</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, iothub_client_retry_control.o(i.evaluate_retry_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = evaluate_retry_action &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
</UL>

<P><STRONG><a name="[12]"></a>IoTHubTransportMqtt_Create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = IoTHubTransportMqtt_Create &rArr; IoTHubTransport_MQTT_Common_Create &rArr; InitializeTransportHandleData &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>IoTHubTransportMqtt_Destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = IoTHubTransportMqtt_Destroy &rArr; IoTHubTransport_MQTT_Common_Destroy &rArr; DisconnectFromClient &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>IoTHubTransportMqtt_DeviceMethod_Response</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_DeviceMethod_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = IoTHubTransportMqtt_DeviceMethod_Response &rArr; IoTHubTransport_MQTT_Common_DeviceMethod_Response &rArr; publish_device_method_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>IoTHubTransportMqtt_DoWork</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = IoTHubTransportMqtt_DoWork &rArr; IoTHubTransport_MQTT_Common_DoWork &rArr; InitializeConnection &rArr; SendMqttConnectMsg &rArr; IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>IoTHubTransportMqtt_GetHostname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubTransportMqtt_GetHostname &rArr; IoTHubTransport_MQTT_Common_GetHostname &rArr; STRING_clone &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetHostname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>IoTHubTransportMqtt_GetSendStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubTransportMqtt_GetSendStatus &rArr; IoTHubTransport_MQTT_Common_GetSendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetSendStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>IoTHubTransportMqtt_ProcessItem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_ProcessItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = IoTHubTransportMqtt_ProcessItem &rArr; IoTHubTransport_MQTT_Common_ProcessItem &rArr; publish_device_twin_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>IoTHubTransportMqtt_Register</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IoTHubTransportMqtt_Register &rArr; IoTHubTransport_MQTT_Common_Register &rArr; IoTHubClient_Auth_Get_DeviceKey
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>IoTHubTransportMqtt_SendMessageDisposition</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_SendMessageDisposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IoTHubTransportMqtt_SendMessageDisposition &rArr; IoTHubTransport_MQTT_Common_SendMessageDisposition &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>IoTHubTransportMqtt_SetOption</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = IoTHubTransportMqtt_SetOption &rArr; IoTHubTransport_MQTT_Common_SetOption &rArr; DisconnectFromClient &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>IoTHubTransportMqtt_SetRetryPolicy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetRetryPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubTransportMqtt_SetRetryPolicy &rArr; IoTHubTransport_MQTT_Common_SetRetryPolicy &rArr; retry_control_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>IoTHubTransportMqtt_Subscribe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = IoTHubTransportMqtt_Subscribe &rArr; IoTHubTransport_MQTT_Common_Subscribe &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>IoTHubTransportMqtt_Subscribe_DeviceMethod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubTransportMqtt_Subscribe_DeviceMethod &rArr; IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>IoTHubTransportMqtt_Subscribe_DeviceTwin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IoTHubTransportMqtt_Subscribe_DeviceTwin &rArr; IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>IoTHubTransportMqtt_Unregister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unregister))
<BR><BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unregister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>IoTHubTransportMqtt_Unsubscribe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IoTHubTransportMqtt_Unsubscribe &rArr; IoTHubTransport_MQTT_Common_Unsubscribe &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>IoTHubTransportMqtt_Unsubscribe_DeviceMethod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IoTHubTransportMqtt_Unsubscribe_DeviceMethod &rArr; IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>IoTHubTransportMqtt_Unsubscribe_DeviceTwin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IoTHubTransportMqtt_Unsubscribe_DeviceTwin &rArr; IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>getIoTransportProvider</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, iothubtransportmqtt.o(i.getIoTransportProvider))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getIoTransportProvider &rArr; xio_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_default_tlsio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create)
</UL>
<P><STRONG><a name="[203]"></a>CloneDiagnosticPropertyData</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, iothub_message.o(i.CloneDiagnosticPropertyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CloneDiagnosticPropertyData &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetDiagnosticPropertyData
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[3cc]"></a>ContainsOnlyUsAscii</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iothub_message.o(i.ContainsOnlyUsAscii))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateAsciiCharactersFilter
</UL>

<P><STRONG><a name="[28c]"></a>DestroyDiagnosticPropertyData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iothub_message.o(i.DestroyDiagnosticPropertyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DestroyDiagnosticPropertyData &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetDiagnosticPropertyData
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
</UL>

<P><STRONG><a name="[28e]"></a>DestroyMessageData</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, iothub_message.o(i.DestroyMessageData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DestroyMessageData &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Destroy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDiagnosticPropertyData
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[a8]"></a>ValidateAsciiCharactersFilter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iothub_message.o(i.ValidateAsciiCharactersFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ValidateAsciiCharactersFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsOnlyUsAscii
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_message.o(i.IoTHubMessage_CreateFromByteArray)
</UL>
<P><STRONG><a name="[3f7]"></a>alloc_socket</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = alloc_socket &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[c5]"></a>err_tcp</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, sockets.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sockets.o(i.lwip_netconn_do_close_internal)
<LI> sockets.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[c8]"></a>event_callback</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = event_callback &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[4bb]"></a>free_socket</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[4b7]"></a>get_socket</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sockets.o(i.get_socket))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[533]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, sockets.o(i.lwip_netconn_do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[c6]"></a>lwip_netconn_do_connected</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, sockets.o(i.lwip_netconn_do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwip_netconn_do_connected &rArr; sys_arch_protect &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_netconn_do_connect)
</UL>
<P><STRONG><a name="[c7]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sockets.o(i.lwip_netconn_do_dns_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_netconn_do_gethostbyname)
</UL>
<P><STRONG><a name="[545]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, sockets.o(i.lwip_netconn_do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[554]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, sockets.o(i.lwip_setsockopt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_setsockopt_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[6d4]"></a>netconn_apimsg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sockets.o(i.netconn_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[6d6]"></a>netconn_close_shutdown</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sockets.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[532]"></a>netconn_drain</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, sockets.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[6dc]"></a>netconn_recv_data</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, sockets.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[542]"></a>pcb_new</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sockets.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[c4]"></a>poll_tcp</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sockets.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sockets.o(i.lwip_netconn_do_close_internal)
<LI> sockets.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[10b]"></a>recv_tcp</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sockets.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[106]"></a>recv_udp</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, sockets.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.pcb_new)
</UL>
<P><STRONG><a name="[c3]"></a>sent_tcp</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sockets.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sockets.o(i.lwip_netconn_do_close_internal)
<LI> sockets.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[53f]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sockets.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
</UL>

<P><STRONG><a name="[555]"></a>tryget_socket</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[112]"></a>tcpip_thread</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcpip_thread &rArr; sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[2bf]"></a>FLASH_MassErase</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f7xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[2ce]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2c1]"></a>FLASH_Program_Byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2c4]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f7xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2c2]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2c3]"></a>FLASH_Program_Word</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2a7]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f7xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2a1]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f7xx_hal_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ETH_FlushTransmitFIFO &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[2a3]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32f7xx_hal_eth.o(i.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[71e]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[721]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[726]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[729]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[11a]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[72e]"></a>prvInitialiseNewTask</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[79b]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[72a]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[72b]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[731]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[732]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[109]"></a>prvTaskExitError</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[736]"></a>prvHeapInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[737]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2a9]"></a>GetSector</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, flash_f7.o(i.GetSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[55d]"></a>CPU_CACHE_Enable</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, main.o(i.CPU_CACHE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CPU_CACHE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[236]"></a>Console_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, main.o(i.Console_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Console_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>MainThread</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, main.o(i.MainThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MainThread &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3c2]"></a>SystemClock_Config</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>cloud_test</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.cloud_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = cloud_test &rArr; iothub_client_XCube_sample_run &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_client_XCube_sample_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>ethernetif_input</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[4b3]"></a>low_level_init</STRONG> (Thumb, 258 bytes, Stack size 88 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = low_level_init &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMATxDescListInit
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[4b5]"></a>low_level_input</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetReceivedFrame_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[bc]"></a>low_level_output</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = low_level_output &rArr; HAL_ETH_TransmitFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TransmitFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[4db]"></a>internal_close</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, net_tls_mbedtls.o(i.internal_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = internal_close &rArr; mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crl_free
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_open_mbedtls
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sock_close_mbedtls
</UL>

<P><STRONG><a name="[f7]"></a>my_debug</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, net_tls_mbedtls.o(i.my_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_debug &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_tls_mbedtls.o(i.net_sock_open_mbedtls)
</UL>
<P><STRONG><a name="[3fa]"></a>append_indent</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, parson.o(i.append_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = append_indent &rArr; append_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[3fb]"></a>append_string</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parson.o(i.append_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = append_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_string
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_indent
</UL>

<P><STRONG><a name="[4ca]"></a>get_quoted_string</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, parson.o(i.get_quoted_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_quoted_string &rArr; process_string &rArr; parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_string
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[70e]"></a>hex_char_to_int</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, parson.o(i.hex_char_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16_hex
</UL>

<P><STRONG><a name="[4fa]"></a>json_array_add</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, parson.o(i.json_array_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = json_array_add &rArr; json_array_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[4fb]"></a>json_array_resize</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, parson.o(i.json_array_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = json_array_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_add
</UL>

<P><STRONG><a name="[4fd]"></a>json_object_add</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, parson.o(i.json_object_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = json_object_add &rArr; json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strdup
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[504]"></a>json_object_free</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, parson.o(i.json_object_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = json_object_free &rArr;  json_value_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
</UL>

<P><STRONG><a name="[505]"></a>json_object_nget_value</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, parson.o(i.json_object_nget_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
</UL>

<P><STRONG><a name="[4ff]"></a>json_object_resize</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, parson.o(i.json_object_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = json_object_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>

<P><STRONG><a name="[509]"></a>json_serialize_string</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, parson.o(i.json_serialize_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = json_serialize_string &rArr; append_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[508]"></a>json_serialize_to_buffer_r</STRONG> (Thumb, 618 bytes, Stack size 56 bytes, parson.o(i.json_serialize_to_buffer_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_string
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_number
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_boolean
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_array
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_name
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_value
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_string
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_indent
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_pretty
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialization_size_pretty
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[70f]"></a>json_value_init_string_no_copy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, parson.o(i.json_value_init_string_no_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_value_init_string_no_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[705]"></a>parse_array_value</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, parson.o(i.parse_array_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = parse_array_value &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_array
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_array
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_count
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_resize
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_add
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[708]"></a>parse_number_value</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, parson.o(i.parse_number_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_number
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[70a]"></a>parse_object_value</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, parson.o(i.parse_object_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = parse_object_value &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_count
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_resize
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[70c]"></a>parse_utf16</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, parson.o(i.parse_utf16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_string
</UL>

<P><STRONG><a name="[70d]"></a>parse_utf16_hex</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, parson.o(i.parse_utf16_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16
</UL>

<P><STRONG><a name="[506]"></a>parse_value</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, parson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_null
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_boolean
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_string_no_copy
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[500]"></a>parson_strdup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, parson.o(i.parson_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parson_strdup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>

<P><STRONG><a name="[501]"></a>parson_strndup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, parson.o(i.parson_strndup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = parson_strndup &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
</UL>

<P><STRONG><a name="[4cb]"></a>process_string</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, parson.o(i.process_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = process_string &rArr; parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
</UL>

<P><STRONG><a name="[196]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[197]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[3e6]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d0]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[3e9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b5]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[b6]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[3e5]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[98]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1af]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[1bd]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
